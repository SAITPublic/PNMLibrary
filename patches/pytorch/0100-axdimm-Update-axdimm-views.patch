From 7448dbffef90af33fac1de99501d19bccb8306fb Mon Sep 17 00:00:00 2001
From: Savelii Motov <s.motov@samsung.com>
Date: Wed, 1 Feb 2023 14:58:01 +0300
Subject: [PATCH 100/128] [axdimm] Update axdimm views

Update view include and namespaces

Resolves: AXDIMM-593
Related: AXDIMM-584

Signed-off-by: Savelii Motov s.motov@samsung.com
---
 .../ATen/native/axdimm/AxdimmSecureTensor.cpp |  4 +-
 .../ATen/native/axdimm/AxdimmSecureTensor.h   |  2 +-
 .../ATen/native/axdimm/AxdimmTypeHelpers.h    | 10 ++---
 .../ATen/native/axdimm/ops/EmbeddingBag.cpp   | 22 +++++------
 .../lengths_reducer_ops_sec_axdimm.h          | 38 +++++++++----------
 5 files changed, 38 insertions(+), 38 deletions(-)

diff --git a/aten/src/ATen/native/axdimm/AxdimmSecureTensor.cpp b/aten/src/ATen/native/axdimm/AxdimmSecureTensor.cpp
index 4ac22385..91745bc6 100644
--- a/aten/src/ATen/native/axdimm/AxdimmSecureTensor.cpp
+++ b/aten/src/ATen/native/axdimm/AxdimmSecureTensor.cpp
@@ -87,7 +87,7 @@ void AxdimmSecureTensor::load(const void* weights_data) {
     }
   }
 
-  const auto& rows_view = ::axdimm::make_view(std::cref(tables_rows_num_).get());
+  const auto& rows_view = ::pnm::make_view(std::cref(tables_rows_num_).get());
 
   ::axdimm::secure::DeviceArguments args(
       ::axdimm::secure::UntrustedAxdimmDeviceParams{
@@ -100,7 +100,7 @@ void AxdimmSecureTensor::load(const void* weights_data) {
   if (scalar_type_ == torch::kFloat32) {
     auto tensor_data_ptr = static_cast<const float*>(weights_data);
     const auto& weights_view =
-        ::axdimm::make_view(tensor_data_ptr, tensor_data_ptr + tables_size_);
+        ::pnm::make_view(tensor_data_ptr, tensor_data_ptr + tables_size_);
     const auto& scaled_data = apply_scale<float>(weights_view);
     runner_->load_tables(
         scaled_data.data(), rows_view, sparse_feature_size_, with_tag_);
diff --git a/aten/src/ATen/native/axdimm/AxdimmSecureTensor.h b/aten/src/ATen/native/axdimm/AxdimmSecureTensor.h
index 8f8e907c..e7a03a6d 100644
--- a/aten/src/ATen/native/axdimm/AxdimmSecureTensor.h
+++ b/aten/src/ATen/native/axdimm/AxdimmSecureTensor.h
@@ -52,7 +52,7 @@ class AxdimmSecureTensor : public AxdimmBaseTensor {
 
  private:
   template <typename T>
-  auto apply_scale(::axdimm::common_view<const T> src) {
+  auto apply_scale(::pnm::common_view<const T> src) {
     using secure_core_value_type =
         typename SecureTypeTraits<T>::secure_engine_value_t;
     std::vector<secure_core_value_type> output;
diff --git a/aten/src/ATen/native/axdimm/AxdimmTypeHelpers.h b/aten/src/ATen/native/axdimm/AxdimmTypeHelpers.h
index cb713858..df7e3e91 100644
--- a/aten/src/ATen/native/axdimm/AxdimmTypeHelpers.h
+++ b/aten/src/ATen/native/axdimm/AxdimmTypeHelpers.h
@@ -1,7 +1,7 @@
 #ifndef __AXDIMM_TYPE_HELPERS__
 #define __AXDIMM_TYPE_HELPERS__
 
-#include "core/api/c++/axdimm_views.h"
+#include "common/api/pnm_views.h"
 
 #include <algorithm>
 #include <cstdint>
@@ -41,8 +41,8 @@ struct SecureScale {
   using scaled_t = typename SecureTypeTraits<T>::secure_engine_value_t;
 
   static void apply(
-      ::axdimm::common_view<const initial_t> src,
-      ::axdimm::common_view<scaled_t> dst) {
+      ::pnm::common_view<const initial_t> src,
+      ::pnm::common_view<scaled_t> dst) {
     std::transform(src.begin(), src.end(), dst.begin(), [](const auto v) {
       return static_cast<scaled_t>(
           v * SecureTypeTraits<initial_t>::SCALE_FACTOR);
@@ -50,8 +50,8 @@ struct SecureScale {
   }
 
   static void reverse(
-      ::axdimm::common_view<const scaled_t> src,
-      ::axdimm::common_view<initial_t> dst) {
+      ::pnm::common_view<const scaled_t> src,
+      ::pnm::common_view<initial_t> dst) {
     std::transform(src.begin(), src.end(), dst.begin(), [](const auto v) {
       return static_cast<initial_t>(v) /
           SecureTypeTraits<initial_t>::SCALE_FACTOR;
diff --git a/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp b/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
index 915e4249..e9906e08 100644
--- a/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
+++ b/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
@@ -29,8 +29,8 @@ namespace axdimm {
 at::Tensor embedding_bag_forward_simple_impl(
     const at::Tensor& weights,
     const at::Tensor& indices,
-    ::axdimm::common_view<const uint32_t> lengths_view,
-    ::axdimm::common_view<uint8_t> output_view,
+    ::pnm::common_view<const uint32_t> lengths_view,
+    ::pnm::common_view<uint8_t> output_view,
     uint32_t minibatch_size) {
   const AxdimmTensor& ten = convert<AxdimmTensor>(weights);
   const auto& tables_rows_num = ten.get_tables_rows_num();
@@ -64,22 +64,22 @@ at::Tensor embedding_bag_forward_simple_impl(
 at::Tensor embedding_bag_forward_secure_impl(
     const at::Tensor& weights,
     const at::Tensor& indices,
-    ::axdimm::common_view<const uint32_t> lengths_view,
-    ::axdimm::common_view<uint8_t> output_view,
+    ::pnm::common_view<const uint32_t> lengths_view,
+    ::pnm::common_view<uint8_t> output_view,
     uint32_t minibatch_size) {
   const AxdimmSecureTensor& sec_ten = convert<AxdimmSecureTensor>(weights);
 
-  ::axdimm::common_view<uint8_t> checks{};
+  ::pnm::common_view<uint8_t> checks{};
   std::vector<uint8_t> tag_checks_;
   if (sec_ten.with_tag()) {
     tag_checks_.resize(minibatch_size * sec_ten.get_num_tables());
-    checks = ::axdimm::make_view(tag_checks_);
+    checks = ::pnm::make_view(tag_checks_);
   }
 
   auto status = sec_ten.get_runner().run(
       minibatch_size,
       lengths_view,
-      ::axdimm::make_view(
+      ::pnm::make_view(
           static_cast<const uint32_t*>(indices.data_ptr()),
           static_cast<const uint32_t*>(indices.data_ptr()) +
               indices.sizes()[0]),
@@ -88,11 +88,11 @@ at::Tensor embedding_bag_forward_secure_impl(
 
   TORCH_CHECK(status, "Axdimm secure embeddings calculation failed");
 
-  auto output_int_v = ::axdimm::view_cast<const uint32_t>(output_view);
+  auto output_int_v = ::pnm::view_cast<const uint32_t>(output_view);
 
   if (weights.dtype() == torch::kFloat32) {
     SecureScale<float>::reverse(
-        output_int_v, ::axdimm::view_cast<float>(output_view));
+        output_int_v, ::pnm::view_cast<float>(output_view));
   }
 
   return torch::from_blob(
@@ -137,11 +137,11 @@ at::Tensor embedding_bag_forward_only_axdimm(
       base_ten.get_sparse_feature_size() * weights.dtype().itemsize();
   uint8_t* psum_buf = new uint8_t[psum_buf_size_bytes];
   auto output_view =
-      ::axdimm::make_view(psum_buf, psum_buf + psum_buf_size_bytes);
+      ::pnm::make_view(psum_buf, psum_buf + psum_buf_size_bytes);
 
   std::vector<uint32_t> axdimm_lengths;
   transform_offsets(offsets, axdimm_lengths);
-  auto lengths_view = ::axdimm::make_view(std::cref(axdimm_lengths).get());
+  auto lengths_view = ::pnm::make_view(std::cref(axdimm_lengths).get());
 
   if (base_ten.get_tensor_type() == AxdimmTensorType::AXDIMM_SECURE) {
     return embedding_bag_forward_secure_impl(
diff --git a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
index a589d7c8..fe05a73c 100644
--- a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
+++ b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
@@ -79,9 +79,9 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
       auto& indicesInput = Input(indices_vec_start_idx + i);
       auto& lengthsInput = Input(lengths_vec_start_idx + i);
 
-      auto indices = axdimm::make_view(
+      auto indices = pnm::make_view(
           indicesInput.template data<IndexType>(), indicesInput.numel());
-      auto lengths = axdimm::make_view(
+      auto lengths = pnm::make_view(
           lengthsInput.template data<int>(), lengthsInput.numel());
 
       CAFFE_ENFORCE_GT(indices.size(), 0, "indicesInput can't be empty");
@@ -111,21 +111,21 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
         at::dtype<T>());
 
     T* output_buf = output->template data<T>();
-    auto output_view = axdimm::make_view(
+    auto output_view = pnm::make_view(
         output_buf,
         output_buf + minibatch_size * block_size_ * sparse_feature_size_);
 
-    axdimm::common_view<uint8_t> checks{};
+    pnm::common_view<uint8_t> checks{};
     if (with_tag_) {
       tag_checks_.resize(minibatch_size * block_size_);
-      checks = axdimm::make_view(tag_checks_);
+      checks = pnm::make_view(tag_checks_);
     }
 
     auto status = runner_.run(
         minibatch_size,
-        axdimm::make_view(std::cref(lengths_blocked_).get()),
-        axdimm::make_view(std::cref(indices_blocked_).get()),
-        axdimm::view_cast<uint8_t>(output_view),
+        pnm::make_view(std::cref(lengths_blocked_).get()),
+        pnm::make_view(std::cref(indices_blocked_).get()),
+        pnm::view_cast<uint8_t>(output_view),
         checks);
 
     if (!status) {
@@ -135,7 +135,7 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
           LOG(ERROR) << "\t" << i;
     }
 
-    auto output_int_v = axdimm::view_cast<secure_core_value_type>(output_view);
+    auto output_int_v = pnm::view_cast<secure_core_value_type>(output_view);
 
     if constexpr (::at::native::axdimm::SecureTypeTraits<T>::APPLY_SCALE) {
       std::transform(
@@ -160,12 +160,12 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
 
   void init_secure_runner(
       uint64_t sparse_feature_size,
-      axdimm::common_view<const uint32_t> rows,
-      axdimm::common_view<const secure_core_value_type> data) {
+      pnm::common_view<const uint32_t> rows,
+      pnm::common_view<const secure_core_value_type> data) {
     size_t tables_size_bytes = tables_size_ * sizeof(T);
     if (with_tag_) {
       tables_size_bytes +=
-          (tables_size_ / sparse_feature_size_) * sizeof(axdimm::uint128_t);
+          (tables_size_ / sparse_feature_size_) * sizeof(pnm::uint128_t);
     }
     LOG(INFO) << "Operator AXDIMMSecureSparseLengthsReductionOpVec: "
               << " Tables size in bytes: " << tables_size_bytes;
@@ -198,7 +198,7 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
                                // "block_size_" of them).
 
   static constexpr auto tag_size =
-      sizeof(axdimm::uint128_t) / sizeof(secure_core_value_type);
+      sizeof(pnm::uint128_t) / sizeof(secure_core_value_type);
   int64_t sparse_feature_size_{};
   size_t tables_size_{};
   std::vector<uint32_t> rows_;
@@ -244,7 +244,7 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
       mmap(nullptr, tables_size_ * sizeof(T), PROT_READ, MAP_PRIVATE, fd, 0);
   CAFFE_ENFORCE_NE(data, MAP_FAILED, "Fail to map embedded tables file");
 
-  auto data_v = axdimm::make_view(
+  auto data_v = pnm::make_view(
       static_cast<const T*>(data), static_cast<const T*>(data) + tables_size_);
 
   if constexpr (::at::native::axdimm::SecureTypeTraits<T>::APPLY_SCALE) {
@@ -259,12 +259,12 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
         });
     init_secure_runner(
         sparse_feature_size_,
-        axdimm::make_view(std::cref(rows_).get()),
-        axdimm::make_view(std::cref(qdata).get()));
+        pnm::make_view(std::cref(rows_).get()),
+        pnm::make_view(std::cref(qdata).get()));
   } else {
     init_secure_runner(
         sparse_feature_size_,
-        axdimm::make_view(std::cref(rows_).get()),
+        pnm::make_view(std::cref(rows_).get()),
         data_v);
   }
 
@@ -313,8 +313,8 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
 
   init_secure_runner(
       sparse_feature_size_,
-      axdimm::make_view(std::cref(rows_).get()),
-      axdimm::make_view(std::cref(qdata).get()));
+      pnm::make_view(std::cref(rows_).get()),
+      pnm::make_view(std::cref(qdata).get()));
 }
 } // namespace caffe2
 
-- 
2.34.1

