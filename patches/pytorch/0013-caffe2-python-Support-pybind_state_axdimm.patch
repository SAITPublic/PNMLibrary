From d0bcfcb30bd6b20801f2e38348c9d70ec5e0ccc3 Mon Sep 17 00:00:00 2001
From: Maxim Ostapenko <maxim.o@samsung.com>
Date: Tue, 2 Nov 2021 09:08:18 +0900
Subject: [PATCH 013/135] [caffe2/python] Support pybind_state_axdimm

Add necessary classes/python bindings for AXDIMM pybind_state

Signed-off-by: Maxim Ostapenko <maxim.o@samsung.com>
---
 caffe2/CMakeLists.txt                       |  24 ++++-
 caffe2/operators/operator_fallback_axdimm.h | 110 ++++++++++++++++++++
 caffe2/python/CMakeLists.txt                |   8 ++
 caffe2/python/pybind_state_axdimm.cc        |  42 ++++++++
 4 files changed, 183 insertions(+), 1 deletion(-)
 create mode 100644 caffe2/operators/operator_fallback_axdimm.h
 create mode 100644 caffe2/python/pybind_state_axdimm.cc

diff --git a/caffe2/CMakeLists.txt b/caffe2/CMakeLists.txt
index 0163a1da..aed10cba 100644
--- a/caffe2/CMakeLists.txt
+++ b/caffe2/CMakeLists.txt
@@ -1984,7 +1984,29 @@ if(BUILD_PYTHON)
   endif()
 
   if(USE_AXDIMM)
-    # TODO: our code here.
+    add_library(caffe2_pybind11_state_axdimm MODULE ${Caffe2_AXDIMM_PYTHON_SRCS})
+    if(USE_NUMPY)
+      target_compile_options(caffe2_pybind11_state_axdimm PRIVATE "-DUSE_NUMPY")
+    endif()
+    if(NOT MSVC)
+      target_compile_options(caffe2_pybind11_state_axdimm PRIVATE "-fvisibility=hidden")
+    endif()
+    set_target_properties(caffe2_pybind11_state_axdimm PROPERTIES PREFIX "")
+    set_target_properties(caffe2_pybind11_state_axdimm PROPERTIES SUFFIX ${PY_EXT_SUFFIX})
+    set_target_properties(caffe2_pybind11_state_axdimm PROPERTIES LINK_FLAGS "${_caffe2_pybind11_state_linker_flags}")
+    target_include_directories(caffe2_pybind11_state_axdimm PRIVATE $<INSTALL_INTERFACE:include>)
+    target_include_directories(caffe2_pybind11_state_axdimm PRIVATE ${Caffe2_CPU_INCLUDE} ${Caffe2_AXDIMM_INCLUDE})
+    target_link_libraries(caffe2_pybind11_state_axdimm torch_library)
+    if(WIN32)
+      target_link_libraries(caffe2_pybind11_state_axdimm ${PYTHON_LIBRARIES})
+    endif(WIN32)
+
+    # Install with same rpath as non-axdimm caffe2_pybind11_state
+    set_target_properties(
+        caffe2_pybind11_state_axdimm PROPERTIES LIBRARY_OUTPUT_DIRECTORY
+        ${CMAKE_BINARY_DIR}/caffe2/python)
+    install(TARGETS caffe2_pybind11_state_axdimm DESTINATION "${PYTHON_LIB_REL_PATH}/caffe2/python")
+    set_target_properties(caffe2_pybind11_state_axdimm PROPERTIES INSTALL_RPATH "${caffe2_pybind11_rpath}")
   endif()
 
   if(MSVC AND CMAKE_GENERATOR MATCHES "Visual Studio")
diff --git a/caffe2/operators/operator_fallback_axdimm.h b/caffe2/operators/operator_fallback_axdimm.h
new file mode 100644
index 00000000..c5e56e80
--- /dev/null
+++ b/caffe2/operators/operator_fallback_axdimm.h
@@ -0,0 +1,110 @@
+#ifndef CAFFE2_OPERATORS_OPERATOR_AXDIMM_FALLBACK_H_
+#define CAFFE2_OPERATORS_OPERATOR_AXDIMM_FALLBACK_H_
+
+#include "caffe2/core/common.h"
+#include "caffe2/core/context.h"
+#include "caffe2/core/context_axdimm.h"
+#include "caffe2/core/operator.h"
+#include "caffe2/proto/caffe2_pb.h"
+
+namespace caffe2 {
+
+/**
+ * @brief A templated class to allow one to wrap a CPU operator as a AXDIMM
+ * operator.
+ *
+ * This class can be used when one does not have the AXDIMM implementation ready
+ * yet for an operator. Essentially, what this op does is to automatically
+ * deal with data copy for you. Plausibly, this causes a lot of overhead and
+ * is not optimal, so you should use this operator mostly for quick prototyping
+ * purpose.
+ *
+ * All the input and output of the original operator should be TensorCPU.
+ *
+ * Example usage: if you have a class MyMagicOp that is CPU based, and you use
+ * the registration code
+ *     REGISTER_AXDIMM_OPERATOR(MyMagic, MyMagicOp);
+ * to register the CPU side, you can create its corresponding AXDIMM operator
+ * (with performance hits of course) via
+ *     REGISTER_AXDIMM_OPERATOR(MyMagic,
+ *                              AXDIMMFallbackOp);
+ * Note that you will need to make sure that the operators actually share the
+ * same name.
+ *
+ * Advanced usage: if you want to have some specific outputs never copied, you
+ * can use the SkipOutputCopy template argument to do that. For example, if
+ * MyMagic produces two outputs and the first output is always going to live on
+ * the CPU, you can do
+ *     REGISTER_AXDIMM_OPERATOR(MyMagic,
+ *                              AXDIMMFallbackOpEx<SkipIndices<0>>);
+ */
+template <typename SkipOutputCopy>
+class AXDIMMFallbackOpEx final : public Operator<AXDIMMContext> {
+ public:
+  USE_OPERATOR_FUNCTIONS(AXDIMMContext);
+  explicit AXDIMMFallbackOpEx(const OperatorDef& def, Workspace* ws)
+      : Operator<AXDIMMContext>(def, ws) {
+    CAFFE_ENFORCE_EQ(def.device_option().device_type(), PROTO_AXDIMM);
+    OperatorDef base_def_(def);
+    // base_def_ runs on CPU, so we will set its device option to CPU.
+    base_def_.clear_device_option();
+    base_def_.mutable_device_option()->set_device_type(PROTO_CPU);
+    // Set up the symbols for the local workspace.
+    for (const string& name : def.input()) {
+      local_input_blobs_.push_back(local_ws_.CreateBlob(name));
+      CHECK_NOTNULL(local_input_blobs_.back());
+    }
+    base_op_ = CreateOperator(base_def_, &local_ws_);
+    for (const string& name : def.output()) {
+      local_output_blobs_.push_back(local_ws_.GetBlob(name));
+      CHECK_NOTNULL(local_output_blobs_.back());
+    }
+  }
+
+  bool RunOnDevice() override {
+    for (int i = 0; i < InputSize(); ++i) {
+      if (this->InputIsTensorType(i, AXDIMM)) {
+        // use sync copy
+        BlobGetMutableTensor(local_input_blobs_[i], CPU)->CopyFrom(Input(i));
+      } else {
+        VLOG(1) << "Input " << i << " is not TensorAXDIMM. Skipping copy.";
+        // Note(jiayq): This removes a const but conceptually
+        // local_input_blobs will only be used as const blob input for the
+        // base op so we are still fine.
+        local_input_blobs_[i]->ShareExternal(
+            const_cast<void*>(OperatorBase::Inputs()[i]->GetRaw()),
+            OperatorBase::Inputs()[i]->meta());
+      }
+    }
+
+    if (!base_op_->Run()) {
+      LOG(ERROR) << "Base op run failed in AXDIMMFallbackOp. Def: "
+                 << ProtoDebugString(this->debug_def());
+      return false;
+    }
+    for (int i = 0; i < OutputSize(); ++i) {
+      if (SkipOutputCopy::Contains(i)) {
+        VLOG(1) << "Copy output: index " << i << " skipped.";
+        continue;
+      }
+      CAFFE_ENFORCE(
+          BlobIsTensorType(*local_output_blobs_[i], CPU),
+          "AXDIMM fallback op currently does not support non-TensorCPU "
+          "output type who needs copying.");
+      Output(i)->CopyFrom(local_output_blobs_[i]->template Get<TensorCPU>());
+    }
+    return true;
+  }
+
+ protected:
+  Workspace local_ws_;
+  vector<Blob*> local_input_blobs_;
+  vector<Blob*> local_output_blobs_;
+  unique_ptr<OperatorBase> base_op_;
+};
+
+using AXDIMMFallbackOp = AXDIMMFallbackOpEx<SkipIndices<>>;
+
+} // namespace caffe2
+
+#endif // CAFFE2_OPERATORS_OPERATOR_AXDIMM_FALLBACK_H_
diff --git a/caffe2/python/CMakeLists.txt b/caffe2/python/CMakeLists.txt
index 464aa24e..8c393cee 100644
--- a/caffe2/python/CMakeLists.txt
+++ b/caffe2/python/CMakeLists.txt
@@ -27,10 +27,18 @@ set(Caffe2_HIP_PYTHON_SRCS
     "/pybind_state_hip.cc"
 )
 
+# ---[ AXDIMM files
+set(Caffe2_AXDIMM_PYTHON_SRCS
+    ${Caffe2_CPU_PYTHON_SRCS}
+    "/pybind_state_axdimm.cc"
+)
+
 prepend(Caffe2_CPU_PYTHON_SRCS ${CMAKE_CURRENT_SOURCE_DIR} ${Caffe2_CPU_PYTHON_SRCS})
+prepend(Caffe2_AXDIMM_PYTHON_SRCS ${CMAKE_CURRENT_SOURCE_DIR} ${Caffe2_AXDIMM_PYTHON_SRCS})
 prepend(Caffe2_GPU_PYTHON_SRCS ${CMAKE_CURRENT_SOURCE_DIR} ${Caffe2_GPU_PYTHON_SRCS})
 prepend(Caffe2_HIP_PYTHON_SRCS ${CMAKE_CURRENT_SOURCE_DIR} ${Caffe2_HIP_PYTHON_SRCS})
 
 set(Caffe2_CPU_PYTHON_SRCS ${Caffe2_CPU_PYTHON_SRCS} PARENT_SCOPE)
+set(Caffe2_AXDIMM_PYTHON_SRCS ${Caffe2_AXDIMM_PYTHON_SRCS} PARENT_SCOPE)
 set(Caffe2_GPU_PYTHON_SRCS ${Caffe2_GPU_PYTHON_SRCS} PARENT_SCOPE)
 set(Caffe2_HIP_PYTHON_SRCS ${Caffe2_HIP_PYTHON_SRCS} PARENT_SCOPE)
diff --git a/caffe2/python/pybind_state_axdimm.cc b/caffe2/python/pybind_state_axdimm.cc
new file mode 100644
index 00000000..555b9c79
--- /dev/null
+++ b/caffe2/python/pybind_state_axdimm.cc
@@ -0,0 +1,42 @@
+// Note(jiayq): the import_array function is done inside
+// caffe2_python.cc. Read
+// http://docs.scipy.org/doc/numpy-1.10.1/reference/c-api.array.html#miscellaneous
+// for more details.
+
+#define NO_IMPORT_ARRAY
+
+#include "pybind_state.h"
+
+#include <pybind11/pybind11.h>
+#include <pybind11/stl.h>
+
+#include "caffe2/core/context_axdimm.h"
+#include "caffe2/operators/operator_fallback_axdimm.h"
+#include "caffe2/python/pybind_state_registry.h"
+
+namespace caffe2 {
+namespace python {
+
+REGISTER_AXDIMM_OPERATOR(Python, AXDIMMFallbackOp);
+REGISTER_AXDIMM_OPERATOR(
+    PythonGradient,
+    AXDIMMFallbackOp);
+
+REGISTER_AXDIMM_OPERATOR(PythonDLPack, AXDIMMFallbackOp);
+REGISTER_AXDIMM_OPERATOR(PythonDLPackGradient, AXDIMMFallbackOp);
+
+REGISTER_BLOB_FEEDER(AXDIMM, TensorFeeder<AXDIMMContext>);
+
+namespace py = pybind11;
+
+PYBIND11_MODULE(caffe2_pybind11_state_axdimm, m) {
+  m.doc() = "pybind11 stateful interface to Caffe2 workspaces - AXDIMM edition";
+
+  addGlobalMethods(m);
+  addObjectMethods(m);
+  for (const auto& addition : PybindAdditionRegistry()->Keys()) {
+    PybindAdditionRegistry()->Create(addition, m);
+  }
+}
+} // namespace python
+} // namespace caffe2
-- 
2.34.1

