From c9cf687a906b914887d287cc0242030a3cdc60ef Mon Sep 17 00:00:00 2001
From: Egor Kutovoi <e.kutovoi@partner.samsung.com>
Date: Tue, 14 Mar 2023 19:23:17 +0300
Subject: [PATCH 108/128] [refactor] Use PNMSLSOperation directly

Update usage after API change:
* Create the operation on stack
* Create it right before calling `axdimm_run_sls`
* Use views

Related to: AXDIMM-638
---
 .../ATen/native/axdimm/ops/EmbeddingBag.cpp   | 11 ++++--
 .../operators/lengths_reducer_ops_axdimm.cc   | 39 ++++++++++---------
 2 files changed, 27 insertions(+), 23 deletions(-)

diff --git a/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp b/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
index 62416ed0..a40638b8 100644
--- a/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
+++ b/aten/src/ATen/native/axdimm/ops/EmbeddingBag.cpp
@@ -1,3 +1,6 @@
+#include "ai/api/axdimm.h"
+#include "ai/api/sls_operation.h"
+
 #include <ATen/native/axdimm/AxdimmTensorConvert.h>
 
 #include <torch/autograd.h>
@@ -34,12 +37,12 @@ at::Tensor embedding_bag_forward_simple_impl(
     uint32_t minibatch_size) {
   const AxdimmTensor& ten = convert<AxdimmTensor>(weights);
   const auto& tables_rows_num = ten.get_tables_rows_num();
-  PNMSLSOperation* sls_op = axdimm_create_sls_op(
+
+  PNMSLSOperation sls_op{
       ten.get_sparse_feature_size(),
-      ten.get_num_tables(),
-      const_cast<uint32_t*>(tables_rows_num.data()),
+      pnm::make_view(tables_rows_num),
       ten.get_tables_layout(),
-      ten.get_sls_type());
+      ten.get_sls_type()};
 
   // might throw
   axdimm_run_sls(
diff --git a/caffe2/operators/lengths_reducer_ops_axdimm.cc b/caffe2/operators/lengths_reducer_ops_axdimm.cc
index 5b881ea5..63edfebe 100644
--- a/caffe2/operators/lengths_reducer_ops_axdimm.cc
+++ b/caffe2/operators/lengths_reducer_ops_axdimm.cc
@@ -164,7 +164,6 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
     indices_blocked_ = nullptr;
     lengths_blocked_ = nullptr;
 
-    axdimm_destroy_op(sls_op_);
     axdimm_destroy_tables_layout(tables_layout_);
 
     if (private_tables_) {
@@ -173,7 +172,6 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
                 << tables_descriptor_;
     }
 
-    sls_op_ = nullptr;
     tables_layout_ = nullptr;
   }
 
@@ -223,22 +221,13 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
       (void)dataInput;
     }
 
-    // 2) Create SLS operation on first call.
-    if (!sls_op_) {
-      // Sparse feature size.
-      const int64_t D = Input(tables_vec_start_idx_).size_from_dim(1);
-      // A vector of embedding sizes.
-      std::vector<uint32_t> table_entry_list(block_size_, 0);
+    // 2) Populate tables sizes on first call.
+    if (tables_sizes_.empty()) {
+      tables_sizes_.resize(block_size_);
+
       for (int i = 0; i < block_size_; ++i) {
-        table_entry_list[i] = Input(tables_vec_start_idx_ + i).size(0);
+        tables_sizes_[i] = Input(tables_vec_start_idx_ + i).size(0);
       }
-
-      sls_op_ = axdimm_create_sls_op(
-          D,
-          block_size_,
-          table_entry_list.data(),
-          tables_layout_,
-          SLSType::Float);
     }
 
     // 3.1) If new operator invocation consumes more memory for indices,
@@ -294,11 +283,22 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
 
     T* output_buf = output->template data<T>();
 
-    // 6) And finally run the operator.
+    // 6) Create the operator
+
+    const uint32_t sparse_feature_size =
+        Input(tables_vec_start_idx_).size_from_dim(1);
+
+    PNMSLSOperation sls_op{
+        sparse_feature_size,
+        pnm::make_const_view(tables_sizes_),
+        tables_layout_,
+        SLSType::Float};
+
+    // 7) And finally run it.
 
     try {
       axdimm_run_sls(
-          sls_op_,
+          sls_op,
           device_.internal(),
           M,
           (uint32_t*)lengths_blocked_,
@@ -379,6 +379,8 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
   char* lengths_blocked_ = nullptr; // Concatenated lengths arrays
 
   int block_size_; // Number of tables/indices/lengths to be blocked
+  std::vector<uint32_t> tables_sizes_; // Sizes of all tables that are used in
+                                       // operations. Uninitialized at first
 
   int tables_vec_start_idx_; // Starting input index for tables blobs
   int indices_vec_start_idx_; // Starting input index for indices blobs
@@ -390,7 +392,6 @@ class AXDIMMSparseLengthsReductionOpVec : public Operator<AXDIMMContext> {
       0; // Size of currently allocated blocked lengths buffer
   AxdimmDevice device_ =
       AxdimmDevice::make(); // AXDIMM device. TODO: move into AXDIMMContext
-  PNMSLSOperation* sls_op_ = nullptr; // AXDIMM sls operation handle.
   AxdimmTablesLayout* tables_layout_ = nullptr;
 
   bool private_tables_ = false;
-- 
2.34.1

