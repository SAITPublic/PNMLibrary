From 2dd31f6c01afb5116081cddfe30712f102337124 Mon Sep 17 00:00:00 2001
From: Yaroslav Lavrinenko <y.lavrinenko@samsung.com>
Date: Mon, 27 Jun 2022 12:07:10 +0300
Subject: [PATCH 049/135] [secure] Remove model context from run call

Other changes:
 * Add extra warning for non-integer values.

Signed-off-by: Yaroslav Lavrinenko <y.lavrinenko@samsung.com>
---
 .../lengths_reducer_ops_sec_axdimm.cc         | 24 +++++++------------
 1 file changed, 9 insertions(+), 15 deletions(-)

diff --git a/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc b/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
index 702a657c..2469382d 100644
--- a/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
+++ b/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
@@ -1,10 +1,10 @@
 #undef USE_FBGEMM
 
 #include "caffe2/core/context.h"
+#include "caffe2/core/logging.h"
 #include "caffe2/core/operator.h"
 #include "caffe2/operators/lengths_reducer_ops.h"
 #include "caffe2/operators/segment_reduction_op.h"
-#include "caffe2/utils/math.h"
 
 #include "ai/api/axdimm.h"
 
@@ -56,6 +56,12 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
   template <class... Args>
   explicit AXDIMMSecureSparseLengthsReductionOpVec(Args&&... args)
       : Operator<Context>(std::forward<Args>(args)...) {
+    if constexpr (SecureTypeTraits<T>::apply_scale) {
+      LOG(WARNING) << "Secure operator works only with integer types. "
+                      "The floating values will be converted to integer "
+                      "by expression I = static_cast<I>(F * "
+                   << SecureTypeTraits<T>::SCALE_FACTOR << " )";
+    }
     if (!this->template GetSingleArgument<bool>("from_file", false)) {
       init_from_input();
     } else {
@@ -116,18 +122,8 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
           lengths.begin(), lengths.end(), std::back_inserter(lengths_blocked_));
     }
 
-    std::vector<uint32_t> rows_uint(rows_.begin(), rows_.end());
-
     const auto minibatch_size = Input(lengths_vec_start_idx).size(0);
 
-    auto* model_context = axdimm_create_model_context(
-        minibatch_size,
-        sparse_feature_size_,
-        rows_.size(),
-        rows_uint.data(),
-        num_indices_per_lookup_.data(),
-        axdimm_sls_type::AXDIMM_SLS_UINT32);
-
     auto* output = Output(
         0,
         {minibatch_size, block_size_ * sparse_feature_size_},
@@ -140,7 +136,7 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
         output_buf + minibatch_size * block_size_ * sparse_feature_size_);
 
     auto status = runner_.run(
-        model_context,
+        minibatch_size,
         axdimm::make_view(std::cref(lengths_blocked_).get()),
         axdimm::make_view(std::cref(indices_blocked_).get()),
         axdimm::view_cast<uint8_t>(output_view));
@@ -157,8 +153,6 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
           }); // Restore floating point values
     }
 
-    axdimm_destroy_model_context(model_context);
-
     return status;
   }
 
@@ -328,7 +322,7 @@ REGISTER_AXDIMM_OPERATOR(
 REGISTER_CPU_OPERATOR(
     SecureSparseLengthsSumIntVec,
     AXDIMMSecureSparseLengthsReductionOpVec<
-        int32_t ,
+        int32_t,
         TensorTypes<int32_t>,
         axdimm::secure::ProdConsCPURunner<
             typename SecureTypeTraits<int32_t>::secure_engine_value_t>,
-- 
2.34.1

