From 99879ae0879562397ea87df3ac37061196662443 Mon Sep 17 00:00:00 2001
From: Yaroslav Lavrinenko <y.lavrinenko@samsung.com>
Date: Tue, 5 Jul 2022 15:49:39 +0300
Subject: [PATCH 058/128] [secure] Fix secure api call to fit AXDIMM-278

Remove tags from output psum buffers. Now, we need allocate memory
only for SLS psum to properly call SecureRunner::run(...) method.

Signed-off-by: Yaroslav Lavrinenko <y.lavrinenko@samsung.com>
---
 .../lengths_reducer_ops_sec_axdimm.h          | 50 +++++++------------
 1 file changed, 17 insertions(+), 33 deletions(-)

diff --git a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
index 564eec1b..53bd1234 100644
--- a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
+++ b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
@@ -141,28 +141,18 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
         output_buf + minibatch_size * block_size_ * sparse_feature_size_);
 
     axdimm::common_view<uint8_t> checks{};
-    axdimm::common_view<secure_core_value_type> psum_view =
-        axdimm::view_cast<secure_core_value_type>(output_view);
-
     if (with_tag_) {
       tag_checks_.resize(minibatch_size * block_size_);
       checks = axdimm::make_view(tag_checks_);
-
-      psum_buffer_.resize(
-          minibatch_size * block_size_ * (sparse_feature_size_ + tag_size));
-      psum_view = axdimm::make_view(psum_buffer_);
     }
 
     auto status = runner_.run(
         minibatch_size,
         axdimm::make_view(std::cref(lengths_blocked_).get()),
         axdimm::make_view(std::cref(indices_blocked_).get()),
-        axdimm::view_cast<uint8_t>(psum_view),
+        axdimm::view_cast<uint8_t>(output_view),
         checks);
 
-    if (!SecureTypeTraits<T>::apply_scale && !with_tag_)
-      return status; // we already have result in output buffer
-
     if (!status) {
       LOG(ERROR) << "MAC verification failed. Tag mismatch for psum[i]:";
       for (auto i = 0U; i < tag_checks_.size(); ++i)
@@ -170,27 +160,16 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
           LOG(ERROR) << "\t" << i;
     }
 
-    auto rowwise_psum = (with_tag_)
-        ? axdimm::make_rowwise_view(
-              psum_view.begin(),
-              psum_view.end(),
-              sparse_feature_size_ + tag_size,
-              0,
-              tag_size)
-        : axdimm::make_rowwise_view(
-              psum_view.begin(), psum_view.end(), sparse_feature_size_);
-
-    // Copy (or transform) psum from internal buffer to output
-    auto output_it = output_view.begin();
-    for (auto psum_row : rowwise_psum) {
-      output_it = std::transform(
-          psum_row.begin(), psum_row.end(), output_it, [this](const auto v) {
-            if constexpr (SecureTypeTraits<T>::apply_scale) {
-              return static_cast<T>(v) / SecureTypeTraits<T>::SCALE_FACTOR;
-            } else {
-              return v;
-            }
-          });
+    auto output_int_v = axdimm::view_cast<secure_core_value_type>(output_view);
+
+    if constexpr (SecureTypeTraits<T>::apply_scale) {
+      std::transform(
+          output_int_v.begin(),
+          output_int_v.end(),
+          output_view.begin(),
+          [this](const auto v) {
+            return static_cast<T>(v) / SecureTypeTraits<T>::SCALE_FACTOR;
+          }); // Restore floating point values
     }
 
     return status;
@@ -217,7 +196,12 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
                 << " tables_size: " << tables_size_;
       axdimm::secure::DeviceArguments args(
           axdimm::secure::UntrustedAxdimmDeviceParams{
-	    rows, sparse_feature_size, std::move(rank_offsets), 0xF, with_tag_, true});
+              .rows = rows,
+              .sparse_feature_size = sparse_feature_size,
+              .rank_offsets = std::move(rank_offsets),
+              .rank_mask = 0xF,
+              .with_tag = with_tag_,
+              .cache_exec_context = true});
       runner_.init(&args);
     } else if constexpr (std::is_same_v<Context, CPUContext>) {
       axdimm::secure::DeviceArguments args(axdimm::secure::TrivialCPUArgs{
-- 
2.34.1

