From 5881c89b114422a79b6e1736229769686a164004 Mon Sep 17 00:00:00 2001
From: Nikita Enin <n.enin@samsung.com>
Date: Mon, 4 Jul 2022 15:32:46 +0300
Subject: [PATCH 056/128] [secure,sgx] Initialization and runners for
 secure/sgx axdimm device setup

Signed-off-by: Nikita Enin <n.enin@samsung.com>

Resloves: AXDIMM-255, AXDIMM-271
---
 .../lengths_reducer_ops_sec_axdimm.cc         | 113 +++++++-----------
 .../lengths_reducer_ops_sec_axdimm.h          |  50 ++++++--
 caffe2/python/pybind_state_axdimm.cc          |   8 +-
 3 files changed, 87 insertions(+), 84 deletions(-)

diff --git a/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc b/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
index 2951a69e..18bbf57c 100644
--- a/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
+++ b/caffe2/operators/lengths_reducer_ops_sec_axdimm.cc
@@ -9,14 +9,13 @@
 #endif
 
 namespace caffe2 {
-
 //-------------------FLOAT OPERATORS---------------------------------
 REGISTER_AXDIMM_OPERATOR(
     SecureSparseLengthsSumVec,
     AXDIMMSecureSparseLengthsReductionOpVec<
         float,
         TensorTypes<float, at::Half>,
-        axdimm::secure::ProdConsCPURunner<
+        axdimm::secure::ProdConsAXDIMMRunner<
             typename SecureTypeTraits<float>::secure_engine_value_t>,
         AXDIMMContext>);
 
@@ -35,7 +34,7 @@ REGISTER_AXDIMM_OPERATOR(
     AXDIMMSecureSparseLengthsReductionOpVec<
         int32_t,
         TensorTypes<int32_t>,
-        axdimm::secure::ProdConsCPURunner<
+        axdimm::secure::ProdConsAXDIMMRunner<
             typename SecureTypeTraits<int32_t>::secure_engine_value_t>,
         AXDIMMContext>);
 
@@ -49,43 +48,39 @@ REGISTER_CPU_OPERATOR(
         CPUContext>);
 
 //-------------------OPERATORS SCHEMA---------------------------------
-OPERATOR_SCHEMA(SecureSparseLengthsSumVec)
-    .NumInputs(2, INT_MAX)
-    .NumOutputs(1)
-    .SetDoc(R"(Operator for Secure AXDIMM)")
-    .Arg("from_file", "bool: read embedded tables from file")
-    .Arg("path", "string: path of embedded tables")
-    .Arg("num_tables", "uint: number of embedded tables")
-    .Arg("sparse_feature_size", "uint: sparse feature size")
-    .Arg("rows", "vector<uint64>: number of rows for each table")
-    .Arg("with_tag", "bool: perform MAC verification of result")
-    .Input(
-        0,
-        "T1, ..., TN, I1, ..., IN, L1, ..., LN",
-        "*(type: Tensor`<int>`)* List of input tensors: lengths and indices.")
-    .Output(0, "OUTPUT", "Aggregated tensor");
-
-OPERATOR_SCHEMA(SecureSparseLengthsSumIntVec)
-    .NumInputs(2, INT_MAX)
-    .NumOutputs(1)
-    .SetDoc(R"(Unsigned int32_t operator for Secure AXDIMM)")
-    .Arg("from_file", "bool: read embedded tables from file")
-    .Arg("path", "string: path of embedded tables")
-    .Arg("num_tables", "uint: number of embedded tables")
-    .Arg("sparse_feature_size", "uint: sparse feature size")
-    .Arg("rows", "vector<uint64>: number of rows for each table")
-    .Arg("with_tag", "bool: perform MAC verification of result")
-    .Input(
-        0,
-        "T1, ..., TN, I1, ..., IN, L1, ..., LN",
-        "*(type: Tensor`<int>`)* List of input tensors: lengths and indices.")
-    .Output(0, "OUTPUT", "Aggregated tensor");
+// [TODO: AXDIMM-256] remove engine_id after rank allocator is ready
+#define REGISTER_OPERATOR_SCHEMA(operator_name)                                  \
+  OPERATOR_SCHEMA(operator_name)                                                 \
+      .NumInputs(2, INT_MAX)                                                     \
+      .NumOutputs(1)                                                             \
+      .SetDoc(R"(Operator for Secure AXDIMM)")                                   \
+      .Arg("from_file", "bool: read embedded tables from file")                  \
+      .Arg("path", "string: path of embedded tables")                            \
+      .Arg("num_tables", "uint: number of embedded tables")                      \
+      .Arg("sparse_feature_size", "uint: sparse feature size")                   \
+      .Arg("rows", "vector<uint64>: number of rows for each table")              \
+      .Arg(                                                                      \
+          "engine_id",                                                           \
+          "uint: id of inference engine in range [0,num_engines)")               \
+      .Arg("with_tag", "bool: perform MAC verification of result")               \
+      .Input(                                                                    \
+          0,                                                                     \
+          "T1, ..., TN, I1, ..., IN, L1, ..., LN",                               \
+          "*(type: Tensor`<int>`)* List of input tensors: lengths and indices.") \
+      .Output(0, "OUTPUT", "Aggregated tensor")
+
+REGISTER_OPERATOR_SCHEMA(SecureSparseLengthsSumVec);
+REGISTER_OPERATOR_SCHEMA(SecureSparseLengthsSumIntVec);
 
 #ifdef SGX_ENABLE
 //-------------------FLOAT OPERATORS---------------------------------
-//------------------------------------------------------------------
-// AXDIMM-with-SGX operator should be here
-//------------------------------------------------------------------
+REGISTER_AXDIMM_OPERATOR(
+    SgxSecureSparseLengthsSumVec,
+    AXDIMMSecureSparseLengthsReductionOpVec<
+        float,
+        TensorTypes<float, at::Half>,
+        axdimm::secure::sgx::SgxSecureAxdimmRunnerASync,
+        AXDIMMContext>);
 
 REGISTER_CPU_OPERATOR(
     SgxSecureSparseLengthsSumVec,
@@ -96,9 +91,14 @@ REGISTER_CPU_OPERATOR(
         CPUContext>);
 
 //-------------------UINT32_T OPERATORS---------------------------------
-//------------------------------------------------------------------
-// AXDIMM-with-SGX operator should be here
-//------------------------------------------------------------------
+REGISTER_AXDIMM_OPERATOR(
+    SgxSecureSparseLengthsSumIntVec,
+    AXDIMMSecureSparseLengthsReductionOpVec<
+        int32_t,
+        TensorTypes<int32_t>,
+        axdimm::secure::sgx::SgxSecureAxdimmRunnerASync,
+        AXDIMMContext>);
+
 REGISTER_CPU_OPERATOR(
     SgxSecureSparseLengthsSumIntVec,
     AXDIMMSecureSparseLengthsReductionOpVec<
@@ -108,37 +108,8 @@ REGISTER_CPU_OPERATOR(
         CPUContext>);
 
 //-------------------SGX OPERATORS SCHEMA---------------------------------
-OPERATOR_SCHEMA(SgxSecureSparseLengthsSumVec)
-    .NumInputs(2, INT_MAX)
-    .NumOutputs(1)
-    .SetDoc(R"(Operator for Secure AXDIMM)")
-    .Arg("from_file", "bool: read embedded tables from file")
-    .Arg("path", "string: path of embedded tables")
-    .Arg("num_tables", "uint: number of embedded tables")
-    .Arg("sparse_feature_size", "uint: sparse feature size")
-    .Arg("rows", "vector<uint64>: number of rows for each table")
-    .Arg("with_tag", "bool: perform MAC verification of result")
-    .Input(
-        0,
-        "T1, ..., TN, I1, ..., IN, L1, ..., LN",
-        "*(type: Tensor`<int>`)* List of input tensors: lengths and indices.")
-    .Output(0, "OUTPUT", "Aggregated tensor");
-
-OPERATOR_SCHEMA(SgxSecureSparseLengthsSumIntVec)
-    .NumInputs(2, INT_MAX)
-    .NumOutputs(1)
-    .SetDoc(R"(Unsigned int32_t operator for Secure AXDIMM)")
-    .Arg("from_file", "bool: read embedded tables from file")
-    .Arg("path", "string: path of embedded tables")
-    .Arg("num_tables", "uint: number of embedded tables")
-    .Arg("sparse_feature_size", "uint: sparse feature size")
-    .Arg("rows", "vector<uint64>: number of rows for each table")
-    .Arg("with_tag", "bool: perform MAC verification of result")
-    .Input(
-        0,
-        "T1, ..., TN, I1, ..., IN, L1, ..., LN",
-        "*(type: Tensor`<int>`)* List of input tensors: lengths and indices.")
-    .Output(0, "OUTPUT", "Aggregated tensor");
+REGISTER_OPERATOR_SCHEMA(SgxSecureSparseLengthsSumVec);
+REGISTER_OPERATOR_SCHEMA(SgxSecureSparseLengthsSumIntVec);
 #endif
 
 } // namespace caffe2
diff --git a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
index 3fb419e7..564eec1b 100644
--- a/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
+++ b/caffe2/operators/lengths_reducer_ops_sec_axdimm.h
@@ -10,6 +10,7 @@
 #include "ai/api/axdimm.h"
 
 #include "secure/plain/devices/trivial_cpu.h"
+#include "secure/plain/devices/untrusted_axdimm_device.h"
 
 #include <fcntl.h>
 #include <sys/mman.h>
@@ -60,10 +61,11 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
                       "by expression I = static_cast<I>(F * "
                    << SecureTypeTraits<T>::SCALE_FACTOR << " )";
     }
-
+    // [TODO: AXDIMM-256] remove engine_id after rank allocator is ready
+    engine_id_ = this->template GetSingleArgument<size_t>("engine_id", false);
     with_tag_ = this->template GetSingleArgument<bool>("with_tag", false);
     if (with_tag_) {
-        LOG(INFO) << "MAC Verification is enabled.";
+      LOG(INFO) << "MAC Verification is enabled.";
     }
 
     if (!this->template GetSingleArgument<bool>("from_file", false)) {
@@ -198,15 +200,34 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
   using secure_core_value_type =
       typename SecureTypeTraits<T>::secure_engine_value_t;
 
+  template <typename...>
+  static constexpr std::false_type always_false{};
+
   void init_secure_runner(
       uint64_t sparse_feature_size,
       axdimm::common_view<const uint64_t> rows,
       axdimm::common_view<const secure_core_value_type> data) {
-    axdimm::secure::DeviceArguments args(axdimm::secure::TrivialCPUArgs{
-        .rows = rows,
-        .sparse_feature_size = sparse_feature_size,
-        .with_tag = with_tag_});
-    runner_.init(&args);
+    if constexpr (std::is_same_v<Context, AXDIMMContext>) {
+      // [TODO: AXDIMM-256] remove rank_offsets after rank allocator is ready
+      std::vector<uint64_t> rank_offsets(
+          NUM_OF_RANK,
+          engine_id_ * tables_size_ * sizeof(secure_core_value_type));
+      LOG(INFO) << "Operator " << engine_id_
+                << " using rank offset: " << rank_offsets.back()
+                << " tables_size: " << tables_size_;
+      axdimm::secure::DeviceArguments args(
+          axdimm::secure::UntrustedAxdimmDeviceParams{
+	    rows, sparse_feature_size, std::move(rank_offsets), 0xF, with_tag_, true});
+      runner_.init(&args);
+    } else if constexpr (std::is_same_v<Context, CPUContext>) {
+      axdimm::secure::DeviceArguments args(axdimm::secure::TrivialCPUArgs{
+          .rows = rows,
+	  .sparse_feature_size = sparse_feature_size,
+	  .with_tag = with_tag_});
+      runner_.init(&args);
+    } else {
+      static_assert(always_false<Context> && "Wrong context type");
+    }
     runner_.load_tables(data.begin(), rows, sparse_feature_size, with_tag_);
   }
 
@@ -225,6 +246,8 @@ class AXDIMMSecureSparseLengthsReductionOpVec : public Operator<Context> {
   static constexpr auto tag_size =
       sizeof(axdimm::uint128_t) / sizeof(secure_core_value_type);
   int64_t sparse_feature_size_{};
+  size_t tables_size_{};
+  uint32_t engine_id_{};
   std::vector<uint64_t> rows_;
   bool with_tag_{false};
   std::vector<uint8_t> tag_checks_;
@@ -263,18 +286,18 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
   auto fd = open(path.c_str(), O_RDONLY);
   CAFFE_ENFORCE_NE(fd, -1, "Fail to open embedded tables file");
 
-  const auto tables_size =
+  tables_size_ =
       std::accumulate(rows_.begin(), rows_.end(), 0ULL) * sparse_feature_size_;
 
   auto data =
-      mmap(nullptr, tables_size * sizeof(T), PROT_READ, MAP_PRIVATE, fd, 0);
+      mmap(nullptr, tables_size_ * sizeof(T), PROT_READ, MAP_PRIVATE, fd, 0);
   CAFFE_ENFORCE_NE(data, MAP_FAILED, "Fail to map embedded tables file");
 
   auto data_v = axdimm::make_view(
-      static_cast<const T*>(data), static_cast<const T*>(data) + tables_size);
+      static_cast<const T*>(data), static_cast<const T*>(data) + tables_size_);
 
   if constexpr (SecureTypeTraits<T>::apply_scale) {
-    std::vector<secure_core_value_type> qdata(tables_size);
+    std::vector<secure_core_value_type> qdata(tables_size_);
     std::transform(
         data_v.begin(), data_v.end(), qdata.begin(), [](const auto v) {
           return static_cast<secure_core_value_type>(
@@ -293,7 +316,7 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
   }
 
   CAFFE_ENFORCE_EQ(
-      munmap(data, tables_size * sizeof(T)), 0, "Fail to unmap file");
+      munmap(data, tables_size_ * sizeof(T)), 0, "Fail to unmap file");
 }
 
 template <
@@ -333,6 +356,9 @@ void AXDIMMSecureSparseLengthsReductionOpVec<
         });
   }
 
+  tables_size_ =
+      std::accumulate(rows_.begin(), rows_.end(), 0ULL) * sparse_feature_size_;
+
   init_secure_runner(
       sparse_feature_size_,
       axdimm::make_view(std::cref(rows_).get()),
diff --git a/caffe2/python/pybind_state_axdimm.cc b/caffe2/python/pybind_state_axdimm.cc
index eb083570..3d6dd226 100644
--- a/caffe2/python/pybind_state_axdimm.cc
+++ b/caffe2/python/pybind_state_axdimm.cc
@@ -96,13 +96,19 @@ void addSecureAXDIMMGlobalMethods(py::module& m) {
       [](const std::string& weight_file,
          const std::vector<uint32_t>& table_entry,
          uint32_t row_size) {
+        CAFFE_ENFORCE_EQ(
+            nullptr, base_device, "Multiple AXDIMM devices are not supported.");
         // Insert awesome init stuff here
-        std::cout << "Work in Secure mode" << std::endl;
+        LOG(INFO) << "Work in Secure mode" << std::endl;
+        base_device = axdimm_create_base_device();
+	CAFFE_ENFORCE_NE(nullptr, base_device, "AXDIMM device creation failed");
         return "axdimm secure";
       });
   m.def("secure_axdimm_closer", []() {
     // Insert awesome close stuff here
     std::cout << "End of work in Secure mode" << std::endl;
+    axdimm_destroy_base_device(base_device);
+    base_device = nullptr;
     return 0;
   });
 }
-- 
2.34.1

