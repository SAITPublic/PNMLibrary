From c20becebe79d51ea6b6e2b4c66285fc6d5aedadb Mon Sep 17 00:00:00 2001
From: Sergey Lavrentiev <s.lavrentiev@samsung.com>
Date: Mon, 8 Aug 2022 16:26:52 +0300
Subject: [PATCH 033/161] [drivers/dax/axdimm] Add wait queue in rank scheduler

* Wait queues for rank scheduler introduced in order to
relax userspace polling for rank. IOCTL call which failed
to get the rank is added to wait queue with timeout 100 us.
So the kernel thread either get rank, or finally reports failure
to userspace after 100 us timeout.

Resolves: AXDIMM-48

Signed-off-by: Sergey Lavrentiev <s.lavrentiev@samsung.com>
---
 drivers/dax/axdimm_rank_scheduler.c | 53 +++++++++++++++++++++++++----
 drivers/dax/axdimm_rank_scheduler.h |  7 ++--
 2 files changed, 49 insertions(+), 11 deletions(-)

diff --git a/drivers/dax/axdimm_rank_scheduler.c b/drivers/dax/axdimm_rank_scheduler.c
index d03f9025f..289627b75 100644
--- a/drivers/dax/axdimm_rank_scheduler.c
+++ b/drivers/dax/axdimm_rank_scheduler.c
@@ -6,14 +6,23 @@
 
 #include <linux/bitops.h>
 #include <linux/uaccess.h>
+#include <linux/wait.h>
 
 #define BUSY_STATE (1)
 #define IDLE_STATE (0)
 #define MAX_MSK_VAL ((1 << NUM_OF_RANK) - 1)
 
+/* this timeout value was tunned for FPGA, in order to avoid hangs, which
+ * presumably come from userspace rank acquire attempts in a loop */
+#define RETRY_TIMEOUT_NS (100000)
+
+static atomic_t wr_flag = ATOMIC_INIT(0);
+static atomic_t rd_flag = ATOMIC_INIT(0);
+static DECLARE_WAIT_QUEUE_HEAD(wr_wq);
+static DECLARE_WAIT_QUEUE_HEAD(rd_wq);
+
 static unsigned long acquire_free_rank(struct axdimm_rank_scheduler *rank_sched,
-					unsigned int rw_msk,
-					unsigned int wo_msk)
+				       unsigned int rw_msk, unsigned int wo_msk)
 {
 	unsigned long rank;
 	struct axdimm_rank_stat_t *axd_rs = rank_sched->axd_rank_stats;
@@ -25,8 +34,8 @@ static unsigned long acquire_free_rank(struct axdimm_rank_scheduler *rank_sched,
 }
 
 static void find_free_ranks(struct axdimm_rank_scheduler *rank_sched,
-			     unsigned int msk, unsigned int *rw_msk,
-			     unsigned int *wo_msk)
+			    unsigned int msk, unsigned int *rw_msk,
+			    unsigned int *wo_msk)
 {
 	size_t rank;
 	struct axdimm_rank_stat_t *axd_rs = rank_sched->axd_rank_stats;
@@ -142,28 +151,58 @@ static int release_rank_read(struct axdimm_rank_scheduler *rank_sched,
 }
 
 int get_axdimm_rank(struct axdimm_rank_scheduler *rank_sched, unsigned int cmd,
-	     unsigned int arg)
+		    unsigned int arg)
 {
 	int ret = -1;
 
 	if (cmd == GET_RANK_FOR_WRITE) {
 		ret = get_rank_write(rank_sched, arg);
+		if (ret <
+		    0) { /* was not able to get rank for write, wait some time and try again */
+			int wait_res;
+			atomic_set(&wr_flag, 0);
+			/* timeout in nanoseconds */
+			wait_res = wait_event_interruptible_hrtimeout(
+				wr_wq, atomic_read(&wr_flag), RETRY_TIMEOUT_NS);
+			if (wait_res >= 0) {
+				ret = get_rank_write(rank_sched, arg);
+			}
+		}
 	} else if (cmd == GET_RANK_FOR_READ) {
 		ret = get_rank_read(rank_sched, arg);
+		if (ret <
+		    0) { /* was not able to get rank for read, wait some time */
+			int wait_res;
+			atomic_set(&rd_flag, 0);
+			/* timeout in nanoseconds */
+			wait_res = wait_event_interruptible_hrtimeout(
+				rd_wq, atomic_read(&rd_flag), RETRY_TIMEOUT_NS);
+			if (wait_res >= 0) {
+				ret = get_rank_write(rank_sched, arg);
+			}
+		}
 	}
 
 	return ret;
 }
 
-int release_axdimm_rank(struct axdimm_rank_scheduler *rank_sched, unsigned int cmd,
-		 unsigned int arg)
+int release_axdimm_rank(struct axdimm_rank_scheduler *rank_sched,
+			unsigned int cmd, unsigned int arg)
 {
 	int ret = -1;
 
 	if (cmd == RELEASE_WRITE_RANK) {
 		ret = release_rank_write(rank_sched, arg);
+		if (ret >= 0) { /* wake up someone */
+			atomic_set(&wr_flag, 1);
+			wake_up_interruptible(&wr_wq);
+		}
 	} else if (cmd == RELEASE_READ_RANK) {
 		ret = release_rank_read(rank_sched, arg);
+		if (ret >= 0) { /* wake up someone */
+			atomic_set(&rd_flag, 1);
+			wake_up_interruptible(&rd_wq);
+		}
 	}
 
 	return ret;
diff --git a/drivers/dax/axdimm_rank_scheduler.h b/drivers/dax/axdimm_rank_scheduler.h
index 4cd6c1b23..8083cdf16 100644
--- a/drivers/dax/axdimm_rank_scheduler.h
+++ b/drivers/dax/axdimm_rank_scheduler.h
@@ -1,7 +1,6 @@
 // SPDX-License-Identifier: GPL-2.0
 /* Copyright(c) 2022 Samsung LTD. All rights reserved. */
 
-
 #ifndef __AXDIMM_RANK_SCHEDULER_H__
 #define __AXDIMM_RANK_SCHEDULER_H__
 
@@ -20,8 +19,8 @@ struct axdimm_rank_scheduler {
 
 void reset_axdimm_rank_scheduler(struct axdimm_rank_scheduler *rank_sched);
 int get_axdimm_rank(struct axdimm_rank_scheduler *rank_sched, unsigned int cmd,
-	     unsigned int arg);
-int release_axdimm_rank(struct axdimm_rank_scheduler *rank_sched, unsigned int cmd,
-		 unsigned int arg);
+		    unsigned int arg);
+int release_axdimm_rank(struct axdimm_rank_scheduler *rank_sched,
+			unsigned int cmd, unsigned int arg);
 
 #endif
-- 
2.34.1

