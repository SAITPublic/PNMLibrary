From 138e16c68d37a93d8fff7ae1180a699731ce2642 Mon Sep 17 00:00:00 2001
From: Savelii Motov <s.motov@samsung.com>
Date: Wed, 12 Apr 2023 16:23:19 +0300
Subject: [PATCH 119/225] [dba_resource] Add process manager

Add process manager to dba_resource

 - Add process manager that handles allocations and threads
 - Add tracking mode to process manager that track resources
 and didn't free it when process die
 -Add sysfs interface
    leaked - O_RDONLY count of leaked process
    cleanup - O_RDWR show cleanup state and store new cleanup mode

Resolves: MCS-826

Signed-off-by: Savelii Motov <s.motov@samsung.com>
---
 drivers/pnm/dba_resource/Makefile           |   1 +
 drivers/pnm/dba_resource/dba_allocator.c    |  22 +-
 drivers/pnm/dba_resource/dba_allocator.h    |   1 +
 drivers/pnm/dba_resource/dba_proc_mgr.c     | 434 ++++++++++++++++++++
 drivers/pnm/dba_resource/dba_proc_mgr.h     |  31 ++
 drivers/pnm/dba_resource/dba_sysfs.c        |  51 ++-
 drivers/pnm/dba_resource/dba_thread_sched.c |  24 +-
 drivers/pnm/dba_resource/dba_thread_sched.h |   1 +
 drivers/pnm/dba_resource/resource_device.c  |  17 +-
 9 files changed, 573 insertions(+), 9 deletions(-)
 create mode 100644 drivers/pnm/dba_resource/dba_proc_mgr.c
 create mode 100644 drivers/pnm/dba_resource/dba_proc_mgr.h

diff --git a/drivers/pnm/dba_resource/Makefile b/drivers/pnm/dba_resource/Makefile
index 6f96fa943..2d953e29e 100644
--- a/drivers/pnm/dba_resource/Makefile
+++ b/drivers/pnm/dba_resource/Makefile
@@ -6,3 +6,4 @@ dba_resource-y := resource_device.o
 dba_resource-y += dba_allocator.o
 dba_resource-y += dba_thread_sched.o
 dba_resource-y += dba_sysfs.o
+dba_resource-y += dba_proc_mgr.o
diff --git a/drivers/pnm/dba_resource/dba_allocator.c b/drivers/pnm/dba_resource/dba_allocator.c
index 7375122f1..f311f54a6 100644
--- a/drivers/pnm/dba_resource/dba_allocator.c
+++ b/drivers/pnm/dba_resource/dba_allocator.c
@@ -3,6 +3,7 @@
 
 #include "dba_allocator.h"
 #include "dba_log.h"
+#include "dba_proc_mgr.h"
 #include "dba_private.h"
 
 #include <linux/dba_resources.h>
@@ -170,17 +171,23 @@ static int allocate_memory(struct dba_allocation *req)
 	return result;
 }
 
-static void deallocate_memory(struct dba_allocation *req)
+static void deallocate_memory(const struct dba_allocation *req)
 {
 	const uint64_t aligned_size = ALIGN(req->size, general_alloc.gran);
+	const auto uint64_t real_address = req->address + general_alloc.gran;
 
 	mutex_lock(&allocator_lock);
-	req->address += general_alloc.gran;
-	gen_pool_free(general_alloc.pools[req->rank], req->address,
+	gen_pool_free(general_alloc.pools[req->rank], real_address,
 		      aligned_size);
 	mutex_unlock(&allocator_lock);
 }
 
+int allocator_clear_res(const struct dba_allocation *allocation)
+{
+	deallocate_memory(allocation);
+	return 0;
+}
+
 int allocator_ioctl(unsigned int cmd, unsigned long __user arg)
 {
 	struct dba_allocation req;
@@ -196,14 +203,19 @@ int allocator_ioctl(unsigned int cmd, unsigned long __user arg)
 	switch (cmd) {
 	case DBA_IOCTL_ALLOCATE:
 		rc = allocate_memory(&req);
-		if (rc)
-			return rc;
+		if (!rc)
+			rc = dba_register_allocation(&req);
 		break;
 	case DBA_IOCTL_DEALLOCATE:
 		deallocate_memory(&req);
+		rc = dba_unregister_allocation(&req);
+
 		break;
 	}
 
+	if (rc)
+		return rc;
+
 	rc = !!copy_to_user((void __user *)arg, &req, sizeof(req));
 
 	if (rc)
diff --git a/drivers/pnm/dba_resource/dba_allocator.h b/drivers/pnm/dba_resource/dba_allocator.h
index c1915f9a9..61b901a0b 100644
--- a/drivers/pnm/dba_resource/dba_allocator.h
+++ b/drivers/pnm/dba_resource/dba_allocator.h
@@ -23,6 +23,7 @@ void destroy_memory_allocator(void);
 int reset_memory_allocator(void);
 
 int allocator_ioctl(unsigned int cmd, unsigned long __user arg);
+int allocator_clear_res(const struct dba_allocation *allocation);
 
 uint64_t get_avail_size(void);
 
diff --git a/drivers/pnm/dba_resource/dba_proc_mgr.c b/drivers/pnm/dba_resource/dba_proc_mgr.c
new file mode 100644
index 000000000..c7a4b48ad
--- /dev/null
+++ b/drivers/pnm/dba_resource/dba_proc_mgr.c
@@ -0,0 +1,434 @@
+// SPDX-License-Identifier: GPL-2.0
+// Copyright(c) 2023 Samsung LTD. All rights reserved.
+
+#include "dba_proc_mgr.h"
+
+#include "dba_allocator.h"
+#include "dba_log.h"
+#include "dba_thread_sched.h"
+
+#include "linux/dba_resources.h"
+#include "linux/ioport.h"
+#include "linux/stddef.h"
+#include <linux/types.h>
+#include <linux/mutex.h>
+#include <linux/sched.h>
+#include <linux/list.h>
+#include <linux/slab.h>
+
+/* list of descriptors held by process */
+struct dba_alloc_res {
+	struct dba_allocation allocation;
+	struct list_head list;
+};
+
+/* resources allocated for particular process */
+struct dba_proc_res {
+	pid_t pid;
+	struct list_head alloc_res; //[TODO: s.motov] use rb-tree
+	uint8_t threads_mask;
+	/* This counter needed because each open syscall create new
+	 * file descriptors and call register process.
+	 * Sometimes userspace process can just open/release device
+	 * for reset ioctl purpose. take in mind this counter should be accessed
+	 * only under lock in order to prevent race conditions
+	 */
+	int ref_cnt;
+	struct list_head list;
+};
+
+/*
+ * data structure for tracking device resources, allocated to user space
+ * processes
+ */
+struct dba_proc_mgr {
+	struct list_head active_process_list; //[TODO: s.motov] use rb-tree
+	struct list_head leaked_process_list; //[TODO: s.motov] use rb-tree
+	atomic64_t leaked;
+	atomic64_t enable_cleanup;
+	/* mutex for accessing process_list concurrently */
+	struct mutex lock;
+};
+
+static struct dba_proc_mgr dba_proc_mgr = {
+	.active_process_list = LIST_HEAD_INIT(dba_proc_mgr.active_process_list),
+	.leaked_process_list = LIST_HEAD_INIT(dba_proc_mgr.leaked_process_list),
+	.leaked = ATOMIC64_INIT(0),
+	.enable_cleanup = ATOMIC64_INIT(DBA_DISABLE_CLEANUP),
+	.lock = __MUTEX_INITIALIZER(dba_proc_mgr.lock),
+};
+
+static pid_t get_current_process_id(void)
+{
+	/*
+	 * group_leader is a pointer to the task_struct of the main thread of
+	 * userspace process.
+	 */
+	return current->group_leader->pid;
+}
+
+/* this function should be called with sync */
+static struct dba_proc_res *find_current_proc_res(struct dba_proc_mgr *mgr)
+{
+	struct dba_proc_res *proc_res = NULL;
+	const pid_t pid = get_current_process_id();
+
+	list_for_each_entry(proc_res, &mgr->active_process_list, list) {
+		if (proc_res->pid == pid)
+			return proc_res;
+	}
+
+	return NULL;
+}
+
+static int clear_allocations(struct dba_proc_res *proc_res)
+{
+	struct dba_alloc_res *alloc_res = NULL, *alloc_res_temp = NULL;
+	struct dba_allocation *allocation = NULL;
+	uint64_t begin = 0;
+	uint64_t end = 0;
+	int rc = 0;
+
+	list_for_each_entry_safe(alloc_res, alloc_res_temp,
+				 &proc_res->alloc_res, list) {
+		allocation = &alloc_res->allocation;
+		begin = allocation->address;
+		end = begin + allocation->size;
+		DBA_DBG("Process manager release allocation [%llx, %llx], pid: %d, tid: %d\n",
+			begin, end, get_current_process_id(), current->pid);
+
+		rc |= allocator_clear_res(allocation);
+		list_del(&alloc_res->list);
+		kfree(alloc_res);
+	}
+
+	if (rc) {
+		DBA_ERR("Can't clear allocations, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		rc = -EINVAL;
+	}
+
+	return rc;
+}
+
+static int clear_threads(struct dba_proc_res *proc_res)
+{
+	int rc = 0;
+	uint8_t it = 0;
+
+	for (it = 0; it < DBA_THREAD_NUM; ++it) {
+		if (proc_res->threads_mask & (1 << it)) {
+			rc |= thread_sched_clear_res(it);
+			DBA_DBG("Process manager release thread[%d], pid: %d, tid: %d\n",
+				it, get_current_process_id(), current->pid);
+		}
+	}
+
+	if (rc) {
+		DBA_ERR("Can't clear threads, pid %d tid %d\n",
+			get_current_process_id(), current->pid);
+		return -EINVAL;
+	}
+
+	return rc;
+}
+
+static int clear_process_resource(struct dba_proc_res *proc_res)
+{
+	int failed = 0;
+
+	failed |= clear_threads(proc_res);
+	failed |= clear_allocations(proc_res);
+	kfree(proc_res);
+
+	return failed ? -1 : 0;
+}
+
+static inline bool is_resource_empty(struct dba_proc_res *proc_res)
+{
+	return list_empty(&proc_res->alloc_res) && proc_res->threads_mask == 0;
+}
+
+int dba_register_allocation(const struct dba_allocation *allocation)
+{
+	struct dba_proc_res *proc_res = NULL;
+	struct dba_alloc_res *dba_alloc = NULL;
+	int rc = 0;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (unlikely(!proc_res)) {
+		DBA_ERR("Can't find resources, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		rc = -ESRCH;
+		goto error;
+	}
+
+	dba_alloc = kzalloc(sizeof(*dba_alloc), GFP_KERNEL);
+
+	if (dba_alloc) {
+		dba_alloc->allocation = *allocation;
+		INIT_LIST_HEAD(&dba_alloc->list);
+		list_add(&dba_alloc->list, &proc_res->alloc_res);
+	} else {
+		rc = -ENOMEM;
+	}
+
+error:
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	return rc;
+}
+
+int dba_unregister_allocation(const struct dba_allocation *allocation)
+{
+	struct dba_alloc_res *alloc_res = NULL, *dba_alloc_tmp = NULL;
+	struct dba_proc_res *proc_res = NULL;
+	int rc = 0;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (likely(proc_res)) {
+		rc = -EINVAL;
+		list_for_each_entry_safe(alloc_res, dba_alloc_tmp,
+					 &proc_res->alloc_res, list) {
+			if (alloc_res->allocation.address ==
+				    allocation->address &&
+			    alloc_res->allocation.size == allocation->size) {
+				rc = 0;
+				list_del(&alloc_res->list);
+				kfree(alloc_res);
+				break;
+			}
+		}
+		if (rc)
+			DBA_ERR("Allocation not found, pid %d, tid %d\n",
+				get_current_process_id(), current->pid);
+	} else {
+		DBA_ERR("Can't find resources, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		rc = -ESRCH;
+	}
+
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	return rc;
+}
+
+int dba_register_thread(uint8_t thread)
+{
+	struct dba_proc_res *proc_res = NULL;
+	int rc = 0;
+	const uint8_t thread_mask = 1 << thread;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (likely(proc_res)) {
+		proc_res->threads_mask |= thread_mask;
+	} else {
+		DBA_ERR("Can't find resources, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		rc = -ESRCH;
+	};
+
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	return rc;
+}
+
+int dba_unregister_thread(uint8_t thread)
+{
+	struct dba_proc_res *proc_res = NULL;
+	const uint8_t thread_mask = ~(1 << thread);
+	int rc = 0;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (likely(proc_res)) {
+		proc_res->threads_mask &= thread_mask;
+	} else {
+		DBA_ERR("Can't find resources, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		rc = -ESRCH;
+	}
+
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	return rc;
+}
+
+int dba_register_process(void)
+{
+	struct dba_proc_res *proc_res = NULL;
+	int rc = 0;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (!proc_res) {
+		proc_res = kzalloc(sizeof(*proc_res), GFP_KERNEL);
+
+		if (unlikely(!proc_res)) {
+			rc = -ENOMEM;
+			DBA_ERR("Can't allocate memory, pid %d, tid %d\n",
+				get_current_process_id(), current->pid);
+			goto error;
+		}
+
+		proc_res->pid = get_current_process_id();
+		INIT_LIST_HEAD(&proc_res->alloc_res);
+		list_add(&proc_res->list, &dba_proc_mgr.active_process_list);
+		DBA_DBG("Registered process, pid: %d, tid: %d\n",
+			get_current_process_id(), current->pid);
+	}
+
+	proc_res->ref_cnt++;
+
+error:
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	return rc;
+}
+
+int dba_release_process(void)
+{
+	struct dba_proc_res *proc_res = NULL;
+	int rc = 0;
+	bool delete_res = false;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	proc_res = find_current_proc_res(&dba_proc_mgr);
+
+	if (unlikely(!proc_res)) {
+		DBA_ERR("Can't find resources, pid %d, tid %d\n",
+			get_current_process_id(), current->pid);
+		delete_res = false;
+		rc = -ESRCH;
+		goto error;
+	}
+
+	proc_res->ref_cnt--;
+
+	/* Delete resource node from list and
+	 * release resources outside critical section
+	 */
+	if (proc_res->ref_cnt == 0) {
+		list_del(&proc_res->list);
+		delete_res = true;
+	}
+
+error:
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	if (delete_res) {
+		// Process manager is active or resources struct is empty
+		if (is_resource_empty(proc_res) ||
+		    atomic64_read(&dba_proc_mgr.enable_cleanup)) {
+			rc = clear_process_resource(proc_res);
+			if (rc)
+				DBA_ERR("Can't clear process resources, pid %d, tid %d\n",
+					get_current_process_id(), current->pid);
+
+			return rc;
+		}
+
+		mutex_lock(&dba_proc_mgr.lock);
+
+		atomic64_inc(&dba_proc_mgr.leaked);
+		list_add(&proc_res->list, &dba_proc_mgr.leaked_process_list);
+		DBA_DBG("Tracked leakage by pid: %d, tid: %d; thread_mask: %x",
+			get_current_process_id(), current->pid,
+			proc_res->threads_mask);
+		mutex_unlock(&dba_proc_mgr.lock);
+	}
+
+	return rc;
+}
+
+uint64_t dba_get_leaked(void)
+{
+	return atomic64_read(&dba_proc_mgr.leaked);
+}
+
+void dba_disable_cleanup(void)
+{
+	atomic64_set(&dba_proc_mgr.enable_cleanup, DBA_DISABLE_CLEANUP);
+}
+
+int dba_enable_cleanup(void)
+{
+	LIST_HEAD(list_tmp);
+	struct dba_proc_res *proc_res = NULL, *proc_res_tmp = NULL;
+	int rc = 0;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	atomic64_set(&dba_proc_mgr.enable_cleanup, DBA_ENABLE_CLEANUP);
+
+	atomic64_set(&dba_proc_mgr.leaked, 0);
+	// splice list for critical section minimization
+	list_splice_init(&dba_proc_mgr.leaked_process_list, &list_tmp);
+
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	list_for_each_entry_safe(proc_res, proc_res_tmp, &list_tmp, list) {
+		list_del(&proc_res->list);
+		rc |= clear_process_resource(proc_res);
+	}
+
+	return rc ? -1 : 0;
+}
+
+bool dba_get_proc_manager(void)
+{
+	return atomic64_read(&dba_proc_mgr.enable_cleanup) ==
+	       DBA_ENABLE_CLEANUP;
+}
+
+int dba_reset_proc_manager(void)
+{
+	LIST_HEAD(list_active_tmp);
+	LIST_HEAD(list_leaked_tmp);
+
+	struct dba_proc_res *proc_res = NULL, *proc_res_tmp = NULL;
+
+	bool have_leaks = false;
+
+	mutex_lock(&dba_proc_mgr.lock);
+
+	// splice list for critical section minimization
+	list_splice_init(&dba_proc_mgr.active_process_list, &list_active_tmp);
+	list_splice_init(&dba_proc_mgr.leaked_process_list, &list_leaked_tmp);
+
+	have_leaks = atomic64_read(&dba_proc_mgr.leaked) != 0;
+
+	mutex_unlock(&dba_proc_mgr.lock);
+
+	list_for_each_entry_safe(proc_res, proc_res_tmp, &list_active_tmp,
+				 list) {
+		kfree(proc_res);
+	}
+
+	list_for_each_entry_safe(proc_res, proc_res_tmp, &list_leaked_tmp,
+				 list) {
+		kfree(proc_res);
+	}
+
+	return have_leaks ? -1 : 0;
+}
+
+void dba_destroy_proc_manager(void)
+{
+	dba_reset_proc_manager();
+	mutex_destroy(&dba_proc_mgr.lock);
+}
diff --git a/drivers/pnm/dba_resource/dba_proc_mgr.h b/drivers/pnm/dba_resource/dba_proc_mgr.h
new file mode 100644
index 000000000..889b314af
--- /dev/null
+++ b/drivers/pnm/dba_resource/dba_proc_mgr.h
@@ -0,0 +1,31 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+/* Copyright(c) 2023 Samsung LTD. All rights reserved. */
+
+#ifndef __DBA_PROC_MGR_H__
+#define __DBA_PROC_MGR_H__
+
+#include <linux/dba_resources.h>
+
+#define DBA_ENABLE_CLEANUP 1
+#define DBA_DISABLE_CLEANUP 0
+
+int dba_register_process(void);
+int dba_release_process(void);
+
+int dba_register_allocation(const struct dba_allocation *allocation);
+int dba_unregister_allocation(const struct dba_allocation *allocation);
+
+int dba_register_thread(uint8_t thread);
+int dba_unregister_thread(uint8_t thread);
+
+uint64_t dba_get_leaked(void);
+
+int dba_enable_cleanup(void);
+void dba_disable_cleanup(void);
+bool dba_get_proc_manager(void);
+
+int dba_reset_proc_manager(void);
+
+void dba_destroy_proc_manager(void);
+
+#endif /* __DBA_PROC_MGR_H__ */
diff --git a/drivers/pnm/dba_resource/dba_sysfs.c b/drivers/pnm/dba_resource/dba_sysfs.c
index f6d8a4ba6..76d012a30 100644
--- a/drivers/pnm/dba_resource/dba_sysfs.c
+++ b/drivers/pnm/dba_resource/dba_sysfs.c
@@ -2,10 +2,13 @@
 // Copyright(c) 2023 Samsung LTD. All rights reserved.
 
 #include "dba_sysfs.h"
-#include "dba_log.h"
+
 #include "dba_allocator.h"
+#include "dba_log.h"
+#include "dba_proc_mgr.h"
 #include "dba_thread_sched.h"
 
+#include "linux/types.h"
 #include <linux/stringify.h>
 #include <linux/kobject.h>
 #include <linux/device.h>
@@ -16,11 +19,49 @@
 #define WITH_NULL_TERM(var) ((var) + 1)
 #define DBA_RESET 1
 
+static ssize_t cleanup_show(struct device *device,
+			    struct device_attribute *attr, char *buf)
+{
+	const uint64_t value = dba_get_proc_manager();
+
+	return sysfs_emit(buf, "%llu\n", value);
+}
+
+static ssize_t cleanup_store(struct device *device,
+			     struct device_attribute *attr, const char *buf,
+			     size_t count)
+{
+	int rc = 0;
+
+	if (sysfs_streq(buf, __stringify(DBA_DISABLE_CLEANUP))) {
+		dba_disable_cleanup();
+	} else if (sysfs_streq(buf, __stringify(DBA_ENABLE_CLEANUP))) {
+		rc = dba_enable_cleanup();
+		if (rc) {
+			DBA_ERR("Can't enable process manager\n");
+			return rc;
+		}
+	}
+
+	return count;
+}
+static DEVICE_ATTR_RW(cleanup);
+
+static ssize_t leaked_show(struct device *device, struct device_attribute *attr,
+			   char *buf)
+{
+	const uint64_t value = dba_get_leaked();
+
+	return sysfs_emit(buf, "%llu\n", value);
+}
+static DEVICE_ATTR_RO(leaked);
+
 static ssize_t mem_size_show(struct device *device,
 			     struct device_attribute *attr, char *buf)
 {
 	uint64_t value = get_mem_size();
 
+	// [TODO: s-motov] - use sysfs-emit
 	return sprintf(buf, "%llu\n", value);
 }
 static DEVICE_ATTR_RO(mem_size);
@@ -60,6 +101,12 @@ static ssize_t reset_store(struct device *device, struct device_attribute *attr,
 			DBA_ERR("DBA threads scheduler reset failed\n");
 			return rc;
 		}
+
+		rc = dba_reset_proc_manager();
+		if (unlikely(rc)) {
+			DBA_ERR("DBA process manager reset failed\n");
+			return rc;
+		}
 	}
 
 	return count;
@@ -67,6 +114,8 @@ static ssize_t reset_store(struct device *device, struct device_attribute *attr,
 static DEVICE_ATTR_WO(reset);
 
 static struct attribute *dev_attrs[] = {
+	&dev_attr_cleanup.attr,
+	&dev_attr_leaked.attr,
 	&dev_attr_mem_size.attr,
 	&dev_attr_free_size.attr,
 	&dev_attr_alignment.attr,
diff --git a/drivers/pnm/dba_resource/dba_thread_sched.c b/drivers/pnm/dba_resource/dba_thread_sched.c
index 384448767..e9cba81ec 100644
--- a/drivers/pnm/dba_resource/dba_thread_sched.c
+++ b/drivers/pnm/dba_resource/dba_thread_sched.c
@@ -3,6 +3,7 @@
 
 #include "dba_thread_sched.h"
 #include "dba_log.h"
+#include "dba_proc_mgr.h"
 
 #include <linux/kernel.h>
 #include <linux/fs.h>
@@ -137,15 +138,34 @@ void destroy_thread_sched(void)
 int thread_sched_ioctl(unsigned int cmd, unsigned long __user arg)
 {
 	int rc = -EFAULT;
+	int thread = 0;
 
 	switch (cmd) {
-	case DBA_IOCTL_GET_THREAD:
+	case DBA_IOCTL_GET_THREAD: {
 		rc = dba_get_thread();
+		if (rc < 0)
+			break;
+
+		thread = rc;
+
+		rc = dba_register_thread(thread);
+		if (likely(!rc))
+			rc = thread;
+
 		break;
-	case DBA_IOCTL_RELEASE_THREAD:
+	}
+	case DBA_IOCTL_RELEASE_THREAD: {
 		rc = dba_release_thread(arg);
+		if (likely(!rc))
+			rc = dba_unregister_thread(arg);
 		break;
 	}
+	}
 
 	return rc;
 }
+
+int thread_sched_clear_res(uint8_t thread)
+{
+	return dba_release_thread(thread);
+}
diff --git a/drivers/pnm/dba_resource/dba_thread_sched.h b/drivers/pnm/dba_resource/dba_thread_sched.h
index 13b7f03f5..8da709ca0 100644
--- a/drivers/pnm/dba_resource/dba_thread_sched.h
+++ b/drivers/pnm/dba_resource/dba_thread_sched.h
@@ -26,4 +26,5 @@ int thread_sched_ioctl(unsigned int cmd, unsigned long __user arg);
 
 bool get_thread_state(uint8_t thread);
 
+int thread_sched_clear_res(uint8_t thread);
 #endif //__dba_thread_sched_H__
diff --git a/drivers/pnm/dba_resource/resource_device.c b/drivers/pnm/dba_resource/resource_device.c
index 0ee74941f..df3946e48 100644
--- a/drivers/pnm/dba_resource/resource_device.c
+++ b/drivers/pnm/dba_resource/resource_device.c
@@ -3,9 +3,10 @@
 
 #include "dba_allocator.h"
 #include "dba_log.h"
+#include "dba_proc_mgr.h"
 #include "dba_private.h"
-#include "dba_sysfs.h"
 #include "dba_thread_sched.h"
+#include "dba_sysfs.h"
 
 #include <linux/init.h>
 #include <linux/module.h>
@@ -42,7 +43,19 @@ static long dba_ioctl(struct file *file, unsigned int cmd,
 	return result;
 }
 
+static int dba_open(struct inode *inode, struct file *file)
+{
+	return dba_register_process();
+}
+
+static int dba_close(struct inode *inode, struct file *file)
+{
+	return dba_release_process();
+}
+
 static const struct file_operations dba_resource_operation = {
+	.open = dba_open,
+	.release = dba_close,
 	.owner = THIS_MODULE,
 	.unlocked_ioctl = dba_ioctl,
 	.llseek = noop_llseek
@@ -169,6 +182,8 @@ static void __exit exit_dba_resource_module(void)
 
 	destroy_thread_sched();
 
+	dba_destroy_proc_manager();
+
 	DBA_INF("DBA Resource Manager unloaded.");
 }
 
-- 
2.34.1

