From a76b5ff2a72aae26ae35b08a7e0f17ae2fa4ca53 Mon Sep 17 00:00:00 2001
From: Sergei Makarov <serg.makarov@samsung.com>
Date: Wed, 15 Feb 2023 19:25:40 +0300
Subject: [PATCH 081/161] [config-axdimm, Kconfig, Makefile] Add build flag to
 disable AxDIMM

Signed-off-by: Sergei Makarov <serg.makarov@samsung.com>
---
 config-axdimm        |  1 +
 drivers/dax/Kconfig  | 15 +++++++++++++--
 drivers/dax/Makefile | 10 +++++-----
 drivers/dax/device.c | 27 ++++++++++++++++++++++++---
 4 files changed, 43 insertions(+), 10 deletions(-)

diff --git a/config-axdimm b/config-axdimm
index 0085727a1..c048dd33e 100644
--- a/config-axdimm
+++ b/config-axdimm
@@ -10011,6 +10011,7 @@ CONFIG_DEV_DAX_HMEM=m
 CONFIG_DEV_DAX_HMEM_DEVICES=y
 CONFIG_DEV_DAX_KMEM=m
 # CONFIG_DEV_DAX_PMEM_COMPAT is not set
+CONFIG_AXDIMM=y
 CONFIG_NVMEM=y
 CONFIG_NVMEM_SYSFS=y
 # CONFIG_NVMEM_RAVE_SP_EEPROM is not set
diff --git a/drivers/dax/Kconfig b/drivers/dax/Kconfig
index 9cee4bd44..07fafd646 100644
--- a/drivers/dax/Kconfig
+++ b/drivers/dax/Kconfig
@@ -75,9 +75,18 @@ config DEV_DAX_PMEM_COMPAT
 	  device-dax instances under /sys/class/dax. If libdaxctl in
 	  your distribution is older than v58 say M, otherwise say N.
 
+config AXDIMM
+	bool "Enable AXDIMM support"
+	depends on DEV_DAX || DEV_DAX=m
+	default n
+	help
+	  Enable support for AxDIMM accelerator.
+
+if AXDIMM
+
 config AXDIMM_BASE_ADDR
 	int "A base physical address of AXDIMM range in gigabytes"
-	depends on DEV_DAX
+	depends on AXDIMM
 	range 4 66
 	default 4
 	help
@@ -86,7 +95,7 @@ config AXDIMM_BASE_ADDR
 
 config AXDIMM_MEMORY_SCALE
 	int "A scale of AXDIMM memory range"
-	depends on DEV_DAX
+	depends on AXDIMM
 	range 0 4
 	default 2
 	help
@@ -95,3 +104,5 @@ config AXDIMM_MEMORY_SCALE
 	  total range = 64/(2^scale) = 16 gigabytes.
 
 endif
+
+endif
diff --git a/drivers/dax/Makefile b/drivers/dax/Makefile
index 1da9b2387..2abf690d8 100644
--- a/drivers/dax/Makefile
+++ b/drivers/dax/Makefile
@@ -8,11 +8,11 @@ dax-y := super.o
 dax-y += bus.o
 device_dax-y := device.o
 CFLAGS_axdimm.o += -DAXDIMM_DRIVER_VERSION=\"$(shell git describe --first-parent --abbrev=0 --dirty --always)\"
-device_dax-y += axdimm.o
-device_dax-y += axdimm_allocator.o
-device_dax-y += axdimm_rank_scheduler.o
-device_dax-y += axdimm_sysfs.o
-device_dax-y += axdimm_process_manager.o
+device_dax-$(CONFIG_AXDIMM) += axdimm.o
+device_dax-$(CONFIG_AXDIMM) += axdimm_allocator.o
+device_dax-$(CONFIG_AXDIMM) += axdimm_rank_scheduler.o
+device_dax-$(CONFIG_AXDIMM) += axdimm_sysfs.o
+device_dax-$(CONFIG_AXDIMM) += axdimm_process_manager.o
 dax_pmem-y := pmem.o
 
 obj-y += hmem/
diff --git a/drivers/dax/device.c b/drivers/dax/device.c
index 8b3e384f1..398cfc1b0 100644
--- a/drivers/dax/device.c
+++ b/drivers/dax/device.c
@@ -14,7 +14,9 @@
 #include <linux/io.h>
 
 #include "dax-private.h"
+#ifdef CONFIG_AXDIMM
 #include "axdimm-private.h"
+#endif
 #include "bus.h"
 
 static int check_vma(struct dev_dax *dev_dax, struct vm_area_struct *vma,
@@ -311,9 +313,11 @@ static int dax_mmap(struct file *filp, struct vm_area_struct *vma)
 	vma->vm_ops = &dax_vm_ops;
 	vma->vm_flags |= VM_HUGEPAGE;
 
+#ifdef CONFIG_AXDIMM
 	/* If DAX device is AXDIMM, do not support lazy mapping. */
 	if (dev_dax->is_axdimm_device)
 		return axdimm_mmap(filp, vma);
+#endif
 
 	return 0;
 }
@@ -370,22 +374,31 @@ static int dax_open(struct inode *inode, struct file *filp)
 	filp->f_sb_err = file_sample_sb_err(filp);
 	filp->private_data = dev_dax;
 	inode->i_flags = S_DAX;
-
-	return dev_dax->is_axdimm_device ? axdimm_open(inode, filp) : 0;
+#ifdef CONFIG_AXDIMM
+        if (dev_dax->is_axdimm_device)
+		return axdimm_open(inode, filp);
+#endif
+	return 0;
 }
 
 static int dax_release(struct inode *inode, struct file *filp)
 {
 	struct dev_dax *dev_dax = filp->private_data;
 	dev_dbg(&dev_dax->dev, "trace\n");
-	return dev_dax->is_axdimm_device ? axdimm_release(inode, filp) : 0;
+#ifdef CONFIG_AXDIMM
+	if (dev_dax->is_axdimm_device)
+		axdimm_release(inode, filp);
+#endif
+	return 0;
 }
 
 
 static const struct file_operations dax_fops = {
 	.llseek = noop_llseek,
 	.owner = THIS_MODULE,
+#ifdef CONFIG_AXDIMM
 	.unlocked_ioctl = axdimm_ioctl,
+#endif
 	.open = dax_open,
 	.release = dax_release,
 	.get_unmapped_area = dax_get_unmapped_area,
@@ -415,6 +428,7 @@ int dev_dax_probe(struct dev_dax *dev_dax)
 	struct range *range = &dev_dax->ranges[0].range;
 	int is_axdimm_device = 0;
 
+#ifdef CONFIG_AXDIMM
 	/* Even though AXDIMM device has several ranges, we remap all of them at once */
 	is_axdimm_device = dev_dax->is_axdimm_device ||
 			   is_axdimm_range(range->start, range->end);
@@ -426,6 +440,7 @@ int dev_dax_probe(struct dev_dax *dev_dax)
 			goto out_err;
 		}
 	}
+#endif
 
 	pgmap = dev_dax->pgmap;
 
@@ -501,21 +516,27 @@ int dev_dax_probe(struct dev_dax *dev_dax)
 	return devm_add_action_or_reset(dev, dev_dax_kill, dev_dax);
 
 out_err:
+#ifdef CONFIG_AXDIMM
 	if (is_axdimm_device)
 		cleanup_axdimm_device();
+#endif
 	return rc;
 }
 EXPORT_SYMBOL_GPL(dev_dax_probe);
 
+#ifdef CONFIG_AXDIMM
 void dev_dax_remove(struct dev_dax *dev_dax)
 {
 	cleanup_axdimm_device();
 }
 EXPORT_SYMBOL_GPL(dev_dax_remove);
+#endif
 
 static struct dax_device_driver device_dax_driver = {
 	.probe = dev_dax_probe,
+#ifdef CONFIG_AXDIMM
 	.remove = dev_dax_remove,
+#endif
 	.match_always = 1,
 };
 
-- 
2.34.1

