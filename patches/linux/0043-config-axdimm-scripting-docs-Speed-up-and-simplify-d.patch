From ccce177f9cfa3f63907a01c6408c02ae55368399 Mon Sep 17 00:00:00 2001
From: Egor Kutovoi <e.kutovoi@partner.samsung.com>
Date: Fri, 30 Sep 2022 12:39:23 +0000
Subject: [PATCH 043/161] [config-axdimm][scripting][docs] Speed up and
 simplify deb build

Remove CONFIG_DEBUG_INFO, which on its own contributes a ton
to deb pkg build time.

Add a script which automates installing deb packages and removes
old versions.

Also update docs and change deb-pkg -> bindeb-pkg. This way we
don't include kernel source, which are useless anyway.

Resolves: AXDIMM-439
---
 DAX_HOW_TO_BUILD.md | 10 ++++-
 clean_linux_debs.py | 92 +++++++++++++++++++++++++++++++++++++++++++++
 config-axdimm       |  5 ++-
 install_debs.sh     |  4 ++
 4 files changed, 108 insertions(+), 3 deletions(-)
 create mode 100755 clean_linux_debs.py
 create mode 100755 install_debs.sh

diff --git a/DAX_HOW_TO_BUILD.md b/DAX_HOW_TO_BUILD.md
index 2afe5b908..59a1370b5 100644
--- a/DAX_HOW_TO_BUILD.md
+++ b/DAX_HOW_TO_BUILD.md
@@ -1,9 +1,11 @@
 # Deb packages
 
+## Clean build
+
 ```bash
 $ rm -f .config; cp -v config-axdimm .config
 $ rm -fr debian/ vmlinux-gdb.py # cleanup from previous build
-$ make -j `getconf _NPROCESSORS_ONLN` deb-pkg # check https://kernel-team.pages.debian.net/kernel-handbook/ch-common-tasks.html#s-common-building
+$ make -j `getconf _NPROCESSORS_ONLN` bindeb-pkg # check https://kernel-team.pages.debian.net/kernel-handbook/ch-common-tasks.html#s-common-building
 ...
 
 * DAX: direct access to differentiated memory
@@ -18,6 +20,12 @@ DAX: direct access to differentiated memory (DAX) [Y/?] y
   A scale of AXDIMM memory range (AXDIMM_MEMORY_SCALE) [2] (NEW) 2 -> choose your scale here (2 for simulation 16GB range, 0 for FPGA)
 ```
 
+## Install
+
+```bash
+$ ./install_debs.sh
+```
+
 # DAX driver only
 
 ```bash
diff --git a/clean_linux_debs.py b/clean_linux_debs.py
new file mode 100755
index 000000000..e2529a9c1
--- /dev/null
+++ b/clean_linux_debs.py
@@ -0,0 +1,92 @@
+#!/usr/bin/python3
+import subprocess
+
+from argparse import ArgumentParser, Namespace
+from pathlib import Path
+
+
+class DebVersion:
+    def __init__(self, name: str):
+        self.name = name
+
+    def __lt__(self, other: 'DebVersion') -> bool:
+        return subprocess.run(['dpkg', '--compare-versions', self.name, 'lt',
+                               other.name]).returncode == 0
+
+    def __repr__(self) -> str:
+        return self.name
+
+
+def get_kernel_release_name(repo_dir: Path) -> str:
+    return subprocess.run(['make', 'kernelrelease'], capture_output=True,
+                          check=True, text=True, cwd=repo_dir).stdout.strip()
+
+
+def get_version(file: Path) -> DebVersion:
+    name = subprocess.run(['dpkg', '-f', str(file.absolute()), 'Version'],
+                          capture_output=True, check=True,
+                          text=True).stdout.strip()
+    return DebVersion(name)
+
+
+def parse_args() -> Namespace:
+    parser = ArgumentParser(description='Remove old versions of deb packages '
+                                        'generated by linux kernel build')
+    parser.add_argument('dir', type=Path, help='Linux kernel repository '
+                                               'location')
+    parser.add_argument('-y', action='store_true', dest='no_confirm',
+                        help='Don\'t ask for confirmation before deleting '
+                             'files',
+                        default=False)
+
+    return parser.parse_args()
+
+
+def main(repo_dir: Path, no_confirm: bool):
+    debs_dir = repo_dir.absolute().parent
+    to_delete = []
+    last_version = None
+
+    release_name = get_kernel_release_name(repo_dir)
+
+    for file in debs_dir.iterdir():
+        if release_name in file.name:
+            # These are useless, remove them outright
+            if file.suffix == '.buildinfo' or file.suffix == '.changes':
+                to_delete.append(file)
+
+            if file.suffix == '.deb':
+                version = get_version(file)
+
+                if not last_version or last_version < version:
+                    last_version = version
+
+    if not last_version:
+        print('No relevant packages found')
+        return
+
+    print(f'Last version found: {last_version}')
+
+    for file in debs_dir.iterdir():
+        if release_name in file.name and file.suffix == '.deb':
+            version = get_version(file)
+
+            if get_version(file) < last_version:
+                to_delete.append(file)
+
+    if not to_delete:
+        print('Nothing to delete, exiting')
+        return
+
+    for file in to_delete:
+        print(f'To be deleted: {file}')
+
+    if no_confirm or input('Delete files [N/y]? ').lower() == 'y':
+        for file in to_delete:
+            file.unlink()
+
+
+if __name__ == '__main__':
+    args = parse_args();
+    main(args.dir, args.no_confirm)
+
diff --git a/config-axdimm b/config-axdimm
index 91364a0b5..10c59d231 100644
--- a/config-axdimm
+++ b/config-axdimm
@@ -10717,12 +10717,13 @@ CONFIG_DEBUG_BUGVERBOSE=y
 #
 # Compile-time checks and compiler options
 #
-CONFIG_DEBUG_INFO=y
+CONFIG_DEBUG_INFO=n
+CONFIG_DEBUG_INFO_NONE=y
 # CONFIG_DEBUG_INFO_REDUCED is not set
 # CONFIG_DEBUG_INFO_COMPRESSED is not set
 # CONFIG_DEBUG_INFO_SPLIT is not set
 # CONFIG_DEBUG_INFO_DWARF_TOOLCHAIN_DEFAULT is not set
-CONFIG_DEBUG_INFO_DWARF4=y
+# CONFIG_DEBUG_INFO_DWARF4 is not set
 # CONFIG_DEBUG_INFO_DWARF5 is not set
 # CONFIG_DEBUG_INFO_BTF is not set
 CONFIG_GDB_SCRIPTS=y
diff --git a/install_debs.sh b/install_debs.sh
new file mode 100755
index 000000000..c2493d499
--- /dev/null
+++ b/install_debs.sh
@@ -0,0 +1,4 @@
+cd $(dirname $0)
+
+./clean_linux_debs.py . -y
+sudo dpkg -i ../*.deb
-- 
2.34.1

