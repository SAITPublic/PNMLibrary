From 0837d374120840fe45aef8ccf1a64aff993afe5a Mon Sep 17 00:00:00 2001
From: Savelii Motov <s.motov@samsung.com>
Date: Fri, 17 Mar 2023 16:39:15 +0300
Subject: [PATCH 086/225] [dba] add writecombine caching to dax mmap

Signed-off-by: Savelii Motov <s.motov@samsung.com>
---
 config-axdimm             |  1 +
 drivers/dax/Kconfig       |  7 +++++++
 drivers/dax/dba-private.h | 22 ++++++++++++++++++++++
 drivers/dax/device.c      | 10 ++++++++++
 include/linux/memremap.h  |  6 ++++++
 mm/memremap.c             |  3 +++
 6 files changed, 49 insertions(+)
 create mode 100644 drivers/dax/dba-private.h

diff --git a/config-axdimm b/config-axdimm
index ee6a59e18..a4625d9d7 100644
--- a/config-axdimm
+++ b/config-axdimm
@@ -10013,6 +10013,7 @@ CONFIG_DEV_DAX_HMEM_DEVICES=y
 CONFIG_DEV_DAX_KMEM=m
 # CONFIG_DEV_DAX_PMEM_COMPAT is not set
 CONFIG_AXDIMM=y
+CONFIG_DBA=y
 CONFIG_NVMEM=y
 CONFIG_NVMEM_SYSFS=y
 # CONFIG_NVMEM_RAVE_SP_EEPROM is not set
diff --git a/drivers/dax/Kconfig b/drivers/dax/Kconfig
index 07fafd646..78b1b6fb2 100644
--- a/drivers/dax/Kconfig
+++ b/drivers/dax/Kconfig
@@ -106,3 +106,10 @@ config AXDIMM_MEMORY_SCALE
 endif
 
 endif
+
+config DBA
+       bool "Enable CXL DBA support"
+       depends on (DEV_DAX || DEV_DAX=m) && (CXL_DBA || CXL_DBA=m)
+       default n
+       help
+         Enable support for CXL DBA memory accelerator
diff --git a/drivers/dax/dba-private.h b/drivers/dax/dba-private.h
new file mode 100644
index 000000000..c4ffedf20
--- /dev/null
+++ b/drivers/dax/dba-private.h
@@ -0,0 +1,22 @@
+// SPDX-License-Identifier: GPL-2.0
+/* Copyright(c) 2021-2022 Samsung LTD. All rights reserved. */
+
+#ifndef _DBA_PRIVATE_H_
+#define _DBA_PRIVATE_H_
+
+/* For normal inclusion dax-private.h requires this header */
+/* Put the header here not to change original dax-private.h */
+#include "dax-private.h"
+
+/* Total Memory size for DBA region */
+#define DBA_MEMORY_SIZE ((uint64_t)32 << 30)
+
+/* Start address of DBA memory range */
+#define DBA_BASE_ADDR ((uint64_t)66 << 30)
+
+static inline int is_dba_range(u64 start, u64 end)
+{
+	return start == DBA_BASE_ADDR &&
+	       end == DBA_BASE_ADDR + DBA_MEMORY_SIZE - 1;
+}
+#endif
diff --git a/drivers/dax/device.c b/drivers/dax/device.c
index 398cfc1b0..0ab8897ae 100644
--- a/drivers/dax/device.c
+++ b/drivers/dax/device.c
@@ -17,6 +17,9 @@
 #ifdef CONFIG_AXDIMM
 #include "axdimm-private.h"
 #endif
+#ifdef CONFIG_DBA
+#include "dba-private.h"
+#endif
 #include "bus.h"
 
 static int check_vma(struct dev_dax *dev_dax, struct vm_area_struct *vma,
@@ -488,6 +491,13 @@ int dev_dax_probe(struct dev_dax *dev_dax)
 	}
 
 	pgmap->type = MEMORY_DEVICE_GENERIC;
+
+#if defined(CONFIG_AXDIMM) || defined(CONFIG_DBA)
+	if (is_axdimm_device || is_dba_range(range->start, range->end)) {
+		pgmap->type = MEMORY_DEVICE_ACCELERATOR;
+	}
+#endif
+
 	if (dev_dax->align > PAGE_SIZE)
 		pgmap->vmemmap_shift =
 			order_base_2(dev_dax->align >> PAGE_SHIFT);
diff --git a/include/linux/memremap.h b/include/linux/memremap.h
index 7fcaf3180..ffe3b0488 100644
--- a/include/linux/memremap.h
+++ b/include/linux/memremap.h
@@ -64,6 +64,11 @@ struct vmem_altmap {
  * MEMORY_DEVICE_PCI_P2PDMA:
  * Device memory residing in a PCI BAR intended for use with Peer-to-Peer
  * transactions.
+ *
+ * MEMORY_DEVICE_ACCELERATOR:
+ * Device memory that is write combine cache used for cpu directly addresseble
+ * accelerators memory. Using of unchached mode is safe but also slow for
+ * intensive data movement.
  */
 enum memory_type {
 	/* 0 is reserved to catch uninitialized type fields */
@@ -72,6 +77,7 @@ enum memory_type {
 	MEMORY_DEVICE_FS_DAX,
 	MEMORY_DEVICE_GENERIC,
 	MEMORY_DEVICE_PCI_P2PDMA,
+	MEMORY_DEVICE_ACCELERATOR,
 };
 
 struct dev_pagemap_ops {
diff --git a/mm/memremap.c b/mm/memremap.c
index 08cbf54fe..271ea8cb2 100644
--- a/mm/memremap.c
+++ b/mm/memremap.c
@@ -342,6 +342,9 @@ void *memremap_pages(struct dev_pagemap *pgmap, int nid)
 	case MEMORY_DEVICE_PCI_P2PDMA:
 		params.pgprot = pgprot_noncached(params.pgprot);
 		break;
+	case MEMORY_DEVICE_ACCELERATOR:
+		params.pgprot = pgprot_writecombine(params.pgprot);
+		break;
 	default:
 		WARN(1, "Invalid pgmap type %d\n", pgmap->type);
 		break;
-- 
2.34.1

