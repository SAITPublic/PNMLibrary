From fe0ace3ea7cd359a3fa28d76c840326099bd40d8 Mon Sep 17 00:00:00 2001
From: Savelii Motov <s.motov@samsung.com>
Date: Tue, 19 Sep 2023 13:50:39 +0000
Subject: [PATCH 188/225] [sls] Refactor device parameters

Split device parameters onto actual parameters and constants
which can be deduced according to broadwell memory map

Also fix parameters initialization order

Related to: MCS23-1544
Resolves: MCS23-1645

Signed-off-by: Savelii Motov <s.motov@samsung.com>
---
 PNM_README.md                          |  36 ++---
 drivers/pnm/sls_resource/topo/axdimm.h |   4 +-
 drivers/pnm/sls_resource/topo/cxl.h    |  10 +-
 drivers/pnm/sls_resource/topo/params.c | 193 +++++++++++++++----------
 drivers/pnm/sls_resource/topo/params.h |  32 +++-
 include/uapi/linux/sls_resources.h     |   5 -
 6 files changed, 167 insertions(+), 113 deletions(-)

diff --git a/PNM_README.md b/PNM_README.md
index e7fd9383b..9b0becc4c 100644
--- a/PNM_README.md
+++ b/PNM_README.md
@@ -142,31 +142,23 @@ In case of any failure a module will not be loaded and you will receive error me
 
 Modules use parameters to configure the memory and compute unit topology for hardware or simulator.
 
-Only `sls_resource` module has parameters so far. There are 21 parameters. Here is a table with the parameter list and their default values depends on selected device type (`CXL` or `AXDIMM`):
-
-| Parameter               | `CONFIG_DEV_SLS_BUS=AXDIMM` | `CONFIG_DEV_SLS_BUS=CXL` | Description                                                            | Restrictions                                           |
-| ----------------------- | --------------------------- | ------------------------ | ---------------------------------------------------------------------- | ------------------------------------------------------ |
-| `dev_type`              | "AXDIMM"                    | "CXL"                    | The device type                                                        |                                                        |
-| `base_addr`             | 66                          | 66                       | The physical offset (in GB) of device memory                           |                                                        |
-| `scale`                 | 0                           | 0                        | The scale of device memory. The overall memory size is `64GB >> scale` | Should be lower or equal to 4                          |
-| `nr_cunits`             | 4                           | 2                        | The number of compute units                                            | Should be a power of 2                                 |
-| `nr_ch`                 | 2                           | 2                        | The number of CH                                                       |                                                        |
-| `nr_cs`                 | 2                           | 2                        | The number of CS                                                       | Should be lower that `nr_cunits`                       |
-| `nr_ranks`              | 4                           | 4                        | The number of memory ranks                                             | Should be a power of 2 and equal to `nr_cunit * nr_cs` |
-| `buf_sz`                | 262144                      | 262080                   | Size of internal buffers (`INST`, `PSUM`, `TAGS`)                      | Should be aligned by 64 bytes                          |
-| `nr_inst_buf`           | 1                           | 1                        | The number of instruction buffers                                      |                                                        |
-| `nr_psum_buf`           | 2                           | 1                        | The number of `PSUM` buffers                                           |                                                        |
-| `nr_tag_buf`            | 2                           | 0                        | The number of `TAGS` buffers                                           |                                                        |
-| `alignment_sz`          | 4096                        | 2097152                  | The data alignment                                                     |                                                        |
-| `inst_sz`               | 8                           | 8                        | The single instruction size                                            |                                                        |
-| `data_sz`               | 4                           | 4                        | Size of single data entry                                              |                                                        |
-| `aligned_tag_sz`        | 64                          | 64                       | The size of single verification `TAG` entry                            | Should be 64 so far                                    |
+Only `sls_resource` module has parameters so far. There are 13 parameters. Here is a table with the parameter list and their default values depends on selected device type (`CXL` or `AXDIMM`):
+
+| Parameter               | `CONFIG_DEV_SLS_BUS=AXDIMM` | `CONFIG_DEV_SLS_BUS=CXL` | Description                                                                                                  | Restrictions                                           |
+| ----------------------- | --------------------------- | ------------------------ |--------------------------------------------------------------------------------------------------------------| ------------------------------------------------------ |
+| `dev_type`              | "AXDIMM"                    | "CXL"                    | The device type                                                                                              |                                                        |
+| `base_addr`             | 66                          | 66                       | The physical offset (in GB) of device memory                                                                 |                                                        |
+| `scale`                 | 0                           | 0                        | The scale of device memory. The overall memory size is `64GB >> scale` for AXDIMM or `32GB >> scale` for CXL | Should be lower or equal to 4                          |
+| `nr_cunits`             | 4                           | 2                        | The number of compute units                                                                                  | Should be a power of 2                                 |
+| `buf_sz`                | 262144                      | 262080                   | Size of internal buffers (`INST`, `PSUM`, `TAGS`)                                                            | Should be aligned by 64 bytes                          |
+| `nr_inst_buf`           | 1                           | 1                        | The number of instruction buffers                                                                            |                                                        |
+| `nr_psum_buf`           | 2                           | 1                        | The number of `PSUM` buffers                                                                                 |                                                        |
+| `nr_tag_buf`            | 2                           | 0                        | The number of `TAGS` buffers                                                                                 |                                                        |
+| `data_sz`               | 4                           | 4                        | Size of single data entry                                                                                    |                                                        |
+| `aligned_tag_sz`        | 64                          | 64                       | The size of single verification `TAG` entry                                                                  | Should be 64 so far                                    |
 | `reg_en`                | 0                           | 0                        | The offset for `SLS_ENABLE` register                                   |                                                        |
 | `reg_poll`              | 2112                        | 1088                     | The offset of `PSUM_POLLING` register                                  |                                                        |
 | `reg_exec`              | 64                          | 64                       | The offset for `SLS_EXEC` register                                     |                                                        |
-| `cunit_interleaving_sz` | 128                         | 0                        | The size of small step in interleaving pattern                         | 0 or 128                                               |
-| `interleaving_stride`   | 128                         | 0                        | The interleaving stride                                                | 0 or 128                                               |
-| `ch_interleaving_sz`    | 131072                      | 0                        | The interleaving pattern switch size                                   | 0 or 131072                                            |
 
 The default parameters are bound to device bus type: `AXDIMM` or `CXL`. The default bus type is specified during the kernel build by `CONFIG_DEV_SLS_BUS`.
 
diff --git a/drivers/pnm/sls_resource/topo/axdimm.h b/drivers/pnm/sls_resource/topo/axdimm.h
index 5941ff3fb..90ee3b795 100644
--- a/drivers/pnm/sls_resource/topo/axdimm.h
+++ b/drivers/pnm/sls_resource/topo/axdimm.h
@@ -9,12 +9,12 @@
 #include <linux/sizes.h>
 #include <linux/sls_common.h>
 
-static const struct sls_params axdimm_default_sls_params = {
+static const struct sls_topology axdimm_default_sls_topology = {
 	.dev_type = SLS_AXDIMM,
 	.nr_ranks = 4,
 	.nr_cunits = 4, // nr_ranks
 	.nr_cs = 2,
-	.nr_ch = 2,
+	.nr_ch = 1,
 	.cunit_interleaving_sz = SZ_128,
 	.ch_interleaving_sz = SZ_128K,
 	.interleaving_stride = SZ_128,
diff --git a/drivers/pnm/sls_resource/topo/cxl.h b/drivers/pnm/sls_resource/topo/cxl.h
index 357b7f7cb..bf315c50e 100644
--- a/drivers/pnm/sls_resource/topo/cxl.h
+++ b/drivers/pnm/sls_resource/topo/cxl.h
@@ -11,12 +11,12 @@
 
 #define HUGE_PAGE_SIZE (2 << 20)
 
-static const struct sls_params cxl_default_sls_params = {
+static const struct sls_topology cxl_default_sls_topology = {
 	.dev_type = SLS_CXL,
-	.nr_ranks = 4, // 2 inactive
-	.nr_cunits = 2, // nr_ch
-	.nr_cs = 2,
-	.nr_ch = 2,
+	.nr_ranks = 2, // 4 ranks, 2 inactive
+	.nr_cunits = 2, // nr_ranks
+	.nr_cs = 1,
+	.nr_ch = 1,
 	.cunit_interleaving_sz = 0,
 	.ch_interleaving_sz = 0,
 	.interleaving_stride = 0,
diff --git a/drivers/pnm/sls_resource/topo/params.c b/drivers/pnm/sls_resource/topo/params.c
index 73087816b..d10851955 100644
--- a/drivers/pnm/sls_resource/topo/params.c
+++ b/drivers/pnm/sls_resource/topo/params.c
@@ -11,14 +11,37 @@
 #include <linux/moduleparam.h>
 #include <linux/sls_common.h>
 
+// [TODO:] Get rid of kconfig dev_type parameter
 #if CONFIG_DEV_SLS_BUS == DEV_TYPE_SLS_AXDIMM
-static struct sls_params sls_params = axdimm_default_sls_params;
+static struct sls_params sls_params = {
+	.dev_type = { .value = SLS_AXDIMM, .is_set = true },
+};
 #elif CONFIG_DEV_SLS_BUS == DEV_TYPE_SLS_CXL
-static struct sls_params sls_params = cxl_default_sls_params;
+static struct sls_params sls_params = {
+	.dev_type = { .value = SLS_CXL, .is_set = true },
+};
 #else /* CONFIG_DEV_SLS_BUS == DEV_TYPE_SLS_CXL */
 #error "SLS bus/interface should be selected!"
 #endif /* CONFIG_DEV_SLS_BUS == DEV_TYPE_SLS_AXDIMM */
 
+static struct sls_topology sls_topology;
+
+#define APPLY_PARAMETER(param)                                       \
+	{                                                            \
+		if (sls_params.param.is_set) {                       \
+			sls_topology.param = sls_params.param.value; \
+		} else {                                             \
+			sls_params.param.value = sls_topology.param; \
+		}                                                    \
+	}
+
+#define CHECK_PARAMETER(result, param, expr)                     \
+	{                                                        \
+		if (sls_params.param.is_set) {                   \
+			(result) &= sls_params.param.value expr; \
+		}                                                \
+	}
+
 /* CS offsets for interleaved ranks */
 // bankgroup 0 bank 0 row 0 column 0
 #define BASE_OFFSET 0x000000000
@@ -48,10 +71,9 @@ static uint64_t sls_apply_scale(uint64_t addr, int scale)
 	return cleared_addr | FIELD_PREP(SCALE_MASK, scaled_bits);
 }
 
-static void set_mem_blocks_sizes(u64 *block_sz)
+static void set_mem_blocks_sizes(u64 *block_sz, int scale)
 {
 	size_t offsets[SLS_BLOCK_MAX] = {};
-	const int scale = sls_topo()->scale;
 	int block;
 
 	offsets[SLS_BLOCK_BASE] = sls_apply_scale(BASE_OFFSET, scale);
@@ -72,7 +94,7 @@ static void set_mem_blocks_sizes(u64 *block_sz)
 	block_sz[SLS_BLOCK_PSUM] =
 		sls_apply_scale(CS1_OFFSET, scale) - offsets[SLS_BLOCK_PSUM];
 
-	if (CONFIG_DEV_SLS_BUS == DEV_TYPE_SLS_AXDIMM)
+	if (sls_topo()->dev_type == SLS_AXDIMM)
 		return;
 
 	/* one rank per CS, CXL type, need to adjust offsets and size */
@@ -86,69 +108,103 @@ static void set_mem_blocks_sizes(u64 *block_sz)
 
 int init_topology(void)
 {
-	set_mem_blocks_sizes(sls_params.block_sz);
+	const int scale = sls_params.scale.is_set ? sls_params.scale.value : 0;
+
+	APPLY_PARAMETER(dev_type);
+
+	switch ((enum sls_device_type)sls_topology.dev_type) {
+	case SLS_AXDIMM:
+		sls_topology = axdimm_default_sls_topology;
+		break;
+	case SLS_CXL:
+		sls_topology = cxl_default_sls_topology;
+		break;
+	case SLS_UNDEFINED:
+	case SLS_MAX:
+		return -EINVAL;
+	}
+
+	APPLY_PARAMETER(nr_cunits);
+	APPLY_PARAMETER(aligned_tag_sz);
+	APPLY_PARAMETER(data_sz);
+	APPLY_PARAMETER(buf_sz);
+	APPLY_PARAMETER(nr_inst_buf);
+	APPLY_PARAMETER(nr_psum_buf);
+	APPLY_PARAMETER(nr_tag_buf);
+	APPLY_PARAMETER(nr_cunits);
+	APPLY_PARAMETER(base_addr);
+
+	APPLY_PARAMETER(reg_en);
+	APPLY_PARAMETER(reg_exec);
+	APPLY_PARAMETER(reg_poll);
+
+	/* setup topology according to memory model */
+
+	/* cxl and axdimm both have nr_cunits equal to nr_ranks */
+	sls_topology.nr_ranks = sls_topology.nr_cunits;
+	/* deduce number of CS from ranks */
+	sls_topology.nr_cs = roundup(sls_topology.nr_ranks, NR_CUNITS_PER_CS) /
+			     NR_CUNITS_PER_CS;
+	/* deduce of CH from CS */
+	sls_topology.nr_ch =
+		roundup(sls_topology.nr_cs, NR_CS_PER_CH) / NR_CS_PER_CH;
+
+	set_mem_blocks_sizes(sls_topology.block_sz, scale);
+
 	return 0;
 }
 
-const struct sls_params *sls_topo(void)
+const struct sls_topology *sls_topo(void)
 {
-	return &sls_params;
+	return &sls_topology;
 }
 
 // Check that topology in `params` is consistent.
-static int check_topo_consistent(const struct sls_params *params)
+static int validate_parameters(void)
 {
 	bool is_valid = true;
 	const size_t buf_alignment = 64;
 
-	is_valid &= ((params->buf_sz % buf_alignment) == 0);
-	is_valid &= is_power_of_2(params->nr_cunits);
-	is_valid &= is_power_of_2(params->nr_ranks);
-	is_valid &= (params->nr_cs <= params->nr_cunits);
-	is_valid &= (params->nr_ranks == params->nr_ch * params->nr_cs);
-	is_valid &= (params->cunit_interleaving_sz == 0 ||
-		     params->cunit_interleaving_sz == SZ_128);
-	is_valid &= (params->ch_interleaving_sz == 0 ||
-		     params->ch_interleaving_sz == SZ_128K);
-	is_valid &= (params->interleaving_stride == 0 ||
-		     params->interleaving_stride == SZ_128);
-	is_valid &= (params->aligned_tag_sz == SZ_64);
-	is_valid &= (params->scale >= 0 && params->scale <= 4);
+	CHECK_PARAMETER(is_valid, buf_sz, % buf_alignment == 0);
+	CHECK_PARAMETER(is_valid, nr_cunits, != 0);
+	CHECK_PARAMETER(is_valid, nr_cunits, % 2 == 0);
+	CHECK_PARAMETER(is_valid, aligned_tag_sz, == SZ_64);
+	CHECK_PARAMETER(is_valid, scale, >= 0);
+	CHECK_PARAMETER(is_valid, scale, <= 4);
 
 	return is_valid ? 0 : -EINVAL;
 }
 
 static int set_dev_type(const char *val, const struct kernel_param *kp)
 {
-	enum sls_device_type *dev_type = (enum sls_device_type *)kp->arg;
-	int rc;
+	struct sls_param *const param =
+		container_of((int64_t *)kp->arg, struct sls_param, value);
+	int rc = -EINVAL;
 
 	if (strcmp("AXDIMM", val) == 0) {
-		*dev_type = SLS_AXDIMM;
-
-		rc = check_topo_consistent(&axdimm_default_sls_params);
-		if (rc)
-			return rc;
-
-		sls_params = axdimm_default_sls_params;
-		return 0;
+		param->value = SLS_AXDIMM;
+		rc = 0;
+	} else if (strcmp("CXL", val) == 0) {
+		param->value = SLS_CXL;
+		rc = 0;
 	}
-	if (strcmp("CXL", val) == 0) {
-		*dev_type = SLS_CXL;
-		sls_params = cxl_default_sls_params;
-		return check_topo_consistent(&sls_params);
+
+	if (rc) {
+		SLS_ERR("Unknown device name: %s\n", val);
+		return rc;
 	}
 
-	SLS_ERR("Unknown device name: %s\n", val);
+	param->is_set = true;
 
-	return -EINVAL;
+	return rc;
 }
 
 static int get_dev_type(char *buffer, const struct kernel_param *kp)
 {
-	const enum sls_device_type type = *((enum sls_device_type *)kp->arg);
+	const struct sls_param *const param =
+		container_of((int64_t *)kp->arg, struct sls_param, value);
 
-	switch (type) {
+	switch ((const enum sls_device_type)param->value) {
 	case SLS_AXDIMM:
 		return sysfs_emit(buffer, "AXDIMM\n");
 	case SLS_CXL:
@@ -158,7 +214,7 @@ static int get_dev_type(char *buffer, const struct kernel_param *kp)
 		break;
 	}
 
-	SLS_ERR("Unknown device name: %d\n", type);
+	SLS_ERR("Unknown device name: %d\n", param->value);
 
 	return -EINVAL;
 }
@@ -170,23 +226,28 @@ static const struct kernel_param_ops param_ops_dev_type = {
 
 static int set_base_addr(const char *val, const struct kernel_param *kp)
 {
+	struct sls_param *param;
 	uint64_t value;
-	const int rc = kstrtoull(val, 0, &value);
+	const int rc = kstrtoll(val, 0, &value);
 
 	if (rc)
 		return rc;
 
-	value = value << 30;
-	*((uint64_t *)kp->arg) = value;
+	if (value < 0)
+		return rc;
+
+	param = container_of(((int64_t *)kp->arg), struct sls_param, value);
+	param->value = value << 30;
+	param->is_set = true;
 
 	return 0;
 }
 
 static int get_base_addr(char *buffer, const struct kernel_param *kp)
 {
-	uint64_t value = *((uint64_t *)kp->arg);
-
-	value = value >> 30;
+	const struct sls_param *param =
+		container_of((int64_t *)kp->arg, struct sls_param, value);
+	const uint64_t value = param->value >> 30;
 
 	return sysfs_emit(buffer, "%llu\n", value);
 }
@@ -198,28 +259,23 @@ static const struct kernel_param_ops param_ops_base_addr = {
 
 static int set_value(const char *value, const struct kernel_param *kp)
 {
-	int *field_val, rc;
-	ptrdiff_t offset;
-	struct sls_params temp_params;
-
-	temp_params = sls_params;
-	offset = (char *)kp->arg - (char *)&sls_params;
+	struct sls_param *param =
+		container_of((int64_t *)kp->arg, struct sls_param, value);
+	int rc;
 
-	field_val = (int *)((char *)&temp_params + offset);
-	rc = kstrtoint(value, 0, field_val);
+	param->is_set = true;
+	rc = kstrtoll(value, 0, &param->value);
 	if (rc != 0)
 		return rc;
 
 	// Common rule: parameter values should not be negative.
-	if (*field_val < 0)
+	if (param->value < 0)
 		return -EINVAL;
 
-	rc = check_topo_consistent(&temp_params);
+	rc = validate_parameters();
 	if (rc != 0)
 		return rc;
 
-	*((int *)kp->arg) = *field_val; // apply value
-
 	return rc;
 }
 
@@ -233,33 +289,22 @@ static const struct kernel_param_ops param_ops_topo = {
 	.get = get_value,
 };
 
-#define param_check_dev_type(name, p) __param_check(name, p, int)
-#define param_check_topo(name, p) __param_check(name, p, int)
-#define param_check_base_addr(name, p) __param_check(name, p, uint64_t)
+#define param_check_dev_type(name, p) __param_check(name, p, int64_t)
+#define param_check_topo(name, p) __param_check(name, p, int64_t)
+#define param_check_base_addr(name, p) __param_check(name, p, int64_t)
 
 #define TYPED_NAMED_PARAM(param, type) \
-	module_param_named(param, sls_params.param, type, 0444)
+	module_param_named(param, sls_params.param.value, type, 0444)
 
 #define NAMED_PARAM(param) TYPED_NAMED_PARAM(param, topo)
 
 TYPED_NAMED_PARAM(dev_type, dev_type);
 TYPED_NAMED_PARAM(base_addr, base_addr);
-NAMED_PARAM(nr_ranks);
 NAMED_PARAM(nr_cunits);
-NAMED_PARAM(nr_cs);
-NAMED_PARAM(nr_ch);
-NAMED_PARAM(cunit_interleaving_sz);
-NAMED_PARAM(ch_interleaving_sz);
-NAMED_PARAM(interleaving_stride);
 NAMED_PARAM(aligned_tag_sz);
-NAMED_PARAM(inst_sz);
 NAMED_PARAM(data_sz);
 NAMED_PARAM(buf_sz);
 NAMED_PARAM(nr_inst_buf);
 NAMED_PARAM(nr_psum_buf);
 NAMED_PARAM(nr_tag_buf);
-NAMED_PARAM(reg_en);
-NAMED_PARAM(reg_exec);
-NAMED_PARAM(reg_poll);
-NAMED_PARAM(alignment_sz);
 NAMED_PARAM(scale);
diff --git a/drivers/pnm/sls_resource/topo/params.h b/drivers/pnm/sls_resource/topo/params.h
index e76445f45..163d9b35a 100644
--- a/drivers/pnm/sls_resource/topo/params.h
+++ b/drivers/pnm/sls_resource/topo/params.h
@@ -7,10 +7,34 @@
 #include <linux/sls_common.h>
 #include <linux/types.h>
 
+struct sls_param {
+	int64_t value;
+	bool is_set;
+};
+
 struct sls_params {
+	struct sls_param dev_type;
+	struct sls_param nr_cunits;
+	struct sls_param aligned_tag_sz; // Single TAG size (Bytes)
+	struct sls_param data_sz;
+	struct sls_param buf_sz; // Instruction, Psum & Tags Buffers Size (Bytes)
+	struct sls_param nr_inst_buf;
+	struct sls_param nr_psum_buf;
+	struct sls_param nr_tag_buf;
+	struct sls_param reg_en;
+	struct sls_param reg_exec;
+	struct sls_param reg_poll;
+	struct sls_param scale; //[TODO: @s-motov] Replace onto mem_size
+	struct sls_param base_addr;
+};
+
+#define NR_CUNITS_PER_CS 2
+#define NR_CS_PER_CH 2
+
+struct sls_topology {
 	int dev_type;
-	int nr_ranks; /* nr_cunits used instead, for info only */
-	int nr_cunits; /* unifying ranks as actual compute units */
+	int nr_cunits;
+	int nr_ranks;
 	int nr_cs;
 	int nr_ch;
 	int cunit_interleaving_sz;
@@ -27,13 +51,11 @@ struct sls_params {
 	int reg_exec;
 	int reg_poll;
 	int alignment_sz;
-	int scale; //[TODO: MCS23-1534] Remove to total size
-	/* [TODO: @p.bred] make it generic and flexible, then export */
 	uint64_t block_sz[SLS_BLOCK_MAX];
 	uint64_t base_addr;
 };
 
-const struct sls_params *sls_topo(void);
+const struct sls_topology *sls_topo(void);
 
 int init_topology(void);
 
diff --git a/include/uapi/linux/sls_resources.h b/include/uapi/linux/sls_resources.h
index d4e477287..02ed1b479 100644
--- a/include/uapi/linux/sls_resources.h
+++ b/include/uapi/linux/sls_resources.h
@@ -64,8 +64,6 @@
 
 /* Number of cunits */
 #define ATTR_NUM_OF_CUNITS_PATH DEVICE_TOPOLOGY_CONSTANT_PATH(nr_cunits)
-/* Number of picks */
-#define ATTR_NUM_OF_CS_PATH DEVICE_TOPOLOGY_CONSTANT_PATH(nr_cs)
 
 /* Size of single instruction in bytes*/
 #define ATTR_INSTRUCTION_SIZE_PATH DEVICE_TOPOLOGY_CONSTANT_PATH(inst_sz)
@@ -80,9 +78,6 @@
 /* Channel interleaving size in bytes */
 #define ATTR_CHANNEL_INTERLEAVING_SIZE_PATH \
 	DEVICE_TOPOLOGY_CONSTANT_PATH(ch_interleaving_sz)
-/* Interleaving stride in bytes */
-#define ATTR_INTERLEAVING_STRIDE_PATH \
-	DEVICE_TOPOLOGY_CONSTANT_PATH(interleaving_stride)
 
 /* Offset for polling register */
 #define ATTR_POLLING_REGISTER_OFFSET_PATH \
-- 
2.34.1

