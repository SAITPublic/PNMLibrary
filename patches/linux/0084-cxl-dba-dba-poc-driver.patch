From ab2f91a441ad4c9556394e18543eb8753bc5274b Mon Sep 17 00:00:00 2001
From: Savelii Motov <s.motov@samsung.com>
Date: Fri, 3 Mar 2023 14:26:04 +0300
Subject: [PATCH 084/161] [cxl][dba] dba poc driver

Resolves: AXDIMM-628

Signed-off-by: Savelii Motov <s.motov@samsung.com>
---
 config-axdimm             |   1 +
 drivers/cxl/Kconfig       |   7 ++
 drivers/cxl/Makefile      |   2 +
 drivers/cxl/core/Makefile |   1 +
 drivers/cxl/core/core.h   |   5 ++
 drivers/cxl/core/cxldba.c | 142 ++++++++++++++++++++++++++++++++++++++
 drivers/cxl/core/port.c   |   7 ++
 drivers/cxl/cxl.h         |   1 +
 drivers/cxl/cxldba.h      |  29 ++++++++
 drivers/cxl/dba.c         |  24 +++++++
 drivers/cxl/pci.c         |   6 ++
 11 files changed, 225 insertions(+)
 create mode 100644 drivers/cxl/core/cxldba.c
 create mode 100644 drivers/cxl/cxldba.h
 create mode 100644 drivers/cxl/dba.c

diff --git a/config-axdimm b/config-axdimm
index c048dd33e..ee6a59e18 100644
--- a/config-axdimm
+++ b/config-axdimm
@@ -2192,6 +2192,7 @@ CONFIG_CXL_MEM=m
 CONFIG_CXL_PORT=m
 CONFIG_CXL_SUSPEND=y
 CONFIG_CXL_REGION=y
+CONFIG_CXL_DBA=m
 CONFIG_PCCARD=m
 CONFIG_PCMCIA=m
 CONFIG_PCMCIA_LOAD_CIS=y
diff --git a/drivers/cxl/Kconfig b/drivers/cxl/Kconfig
index 768ced3d6..85e1cd945 100644
--- a/drivers/cxl/Kconfig
+++ b/drivers/cxl/Kconfig
@@ -111,4 +111,11 @@ config CXL_REGION
 	select MEMREGION
 	select GET_FREE_REGION
 
+config CXL_DBA
+	tristate "Enable CXL: Database accelerator"
+	default m
+	depends on CXL_BUS && CXL_MEM
+	help
+	  Enable support of CXL DBA accelerator.
+
 endif
diff --git a/drivers/cxl/Makefile b/drivers/cxl/Makefile
index a78270794..f14044766 100644
--- a/drivers/cxl/Makefile
+++ b/drivers/cxl/Makefile
@@ -5,9 +5,11 @@ obj-$(CONFIG_CXL_MEM) += cxl_mem.o
 obj-$(CONFIG_CXL_ACPI) += cxl_acpi.o
 obj-$(CONFIG_CXL_PMEM) += cxl_pmem.o
 obj-$(CONFIG_CXL_PORT) += cxl_port.o
+obj-$(CONFIG_CXL_DBA) += cxl_dba.o
 
 cxl_mem-y := mem.o
 cxl_pci-y := pci.o
 cxl_acpi-y := acpi.o
 cxl_pmem-y := pmem.o
 cxl_port-y := port.o
+cxl_dba-y := dba.o
diff --git a/drivers/cxl/core/Makefile b/drivers/cxl/core/Makefile
index 79c7257f4..9bf7e4f4c 100644
--- a/drivers/cxl/core/Makefile
+++ b/drivers/cxl/core/Makefile
@@ -11,3 +11,4 @@ cxl_core-y += mbox.o
 cxl_core-y += pci.o
 cxl_core-y += hdm.o
 cxl_core-$(CONFIG_CXL_REGION) += region.o
+cxl_core-y += cxldba.o
diff --git a/drivers/cxl/core/core.h b/drivers/cxl/core/core.h
index 1d8f87be2..8825dfc6e 100644
--- a/drivers/cxl/core/core.h
+++ b/drivers/cxl/core/core.h
@@ -71,4 +71,9 @@ int cxl_memdev_init(void);
 void cxl_memdev_exit(void);
 void cxl_mbox_init(void);
 
+
+int is_cxl_dba(struct device *dev);
+int cxl_dba_init(void);
+void cxl_dba_exit(void);
+
 #endif /* __CXL_CORE_H__ */
diff --git a/drivers/cxl/core/cxldba.c b/drivers/cxl/core/cxldba.c
new file mode 100644
index 000000000..f7508a8ff
--- /dev/null
+++ b/drivers/cxl/core/cxldba.c
@@ -0,0 +1,142 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright(c) 2021-2023 Samsung LTD. All rights reserved. */
+
+#include <linux/device.h>
+#include <linux/slab.h>
+#include <linux/pci.h>
+
+#include <cxldba.h>
+#include "core.h"
+
+#define CXL_PNM_MAX_DEVS 65535
+
+static dev_t cxl_pnm_major;
+
+static int cxl_dba_open(struct inode *inode, struct file *file)
+{
+	struct cxl_dba *dba = container_of(inode->i_cdev, struct cxl_dba, cdev);
+
+	file->private_data = dba;
+
+	dev_dbg(&dba->dev, "Open device");
+
+	get_device(&dba->dev);
+
+	return 0;
+}
+
+static int cxl_dba_close(struct inode *inode, struct file *file)
+{
+	struct cxl_dba *dba = file->private_data;
+
+	dev_dbg(&dba->dev, "Close device");
+
+	put_device(&dba->dev);
+
+	return 0;
+}
+
+static const struct file_operations cxl_dba_fops = { .owner = THIS_MODULE,
+						     .open = cxl_dba_open,
+						     .release = cxl_dba_close,
+						     .llseek = noop_llseek };
+
+static char *cxl_dba_devnode(struct device *dev, umode_t *mode, kuid_t *uid,
+			     kgid_t *gid)
+{
+	return kasprintf(GFP_KERNEL, "cxl/%s", dev_name(dev));
+}
+
+static void cxl_dba_release(struct device *dev)
+{
+	struct cxl_dba *dba = container_of(dev, struct cxl_dba, dev);
+
+	kfree(dba);
+}
+
+static const struct device_type cxl_dba_type = {
+	.name = "dba",
+	.devnode = cxl_dba_devnode,
+	.release = cxl_dba_release,
+};
+
+static void cxl_dba_unregister(void *_dba)
+{
+	struct cxl_dba *dba = _dba;
+
+	cdev_device_del(&dba->cdev, &dba->dev);
+	put_device(&dba->dev);
+}
+
+int is_cxl_dba(struct device *dev)
+{
+	return dev->type == &cxl_dba_type;
+}
+
+int cxl_add_dba(struct device *parent, int id)
+{
+	struct pci_dev *pdev;
+	struct cxl_dba *dba;
+	struct device *dev;
+	struct cdev *cdev;
+	int rc = 0;
+
+	dba = kzalloc(sizeof(*dba), GFP_KERNEL);
+	if (!dba)
+		return -ENOMEM;
+
+	pdev = to_pci_dev(parent);
+
+	dba->id = id;
+	dba->csr_regs = &pdev->resource[4];
+
+	dev = &dba->dev;
+	device_initialize(dev);
+
+	dev->bus = &cxl_bus_type;
+	dev->type = &cxl_dba_type;
+	dev->parent = parent;
+	dev->devt = MKDEV(cxl_pnm_major, dev->id);
+
+	cdev = &dba->cdev;
+	cdev_init(cdev, &cxl_dba_fops);
+
+	rc = dev_set_name(dev, "dba%d", dba->id);
+	if (rc)
+		goto cxl_add_dba_free;
+
+	rc = cdev_device_add(cdev, dev);
+	if (rc)
+		goto cxl_add_dba_free;
+
+	rc = devm_add_action_or_reset(parent, cxl_dba_unregister, dba);
+	if (rc)
+		goto cxl_add_dba_free;
+
+	return rc;
+
+cxl_add_dba_free:
+	kfree(dba);
+
+	return rc;
+}
+EXPORT_SYMBOL_NS(cxl_add_dba, CXL);
+
+__init int cxl_dba_init(void)
+{
+	dev_t devt;
+	int rc;
+
+	rc = alloc_chrdev_region(&devt, 0, CXL_PNM_MAX_DEVS, "pnm");
+	if (rc)
+		return rc;
+
+	cxl_pnm_major = MAJOR(devt);
+
+	return 0;
+}
+
+void cxl_dba_exit(void)
+{
+	unregister_chrdev_region(MKDEV(cxl_pnm_major, 0), CXL_PNM_MAX_DEVS);
+}
diff --git a/drivers/cxl/core/port.c b/drivers/cxl/core/port.c
index e7556864e..791e35bab 100644
--- a/drivers/cxl/core/port.c
+++ b/drivers/cxl/core/port.c
@@ -55,6 +55,8 @@ static int cxl_device_id(struct device *dev)
 		return CXL_DEVICE_MEMORY_EXPANDER;
 	if (dev->type == CXL_REGION_TYPE())
 		return CXL_DEVICE_REGION;
+	if (is_cxl_dba(dev))
+		return CXL_DEVICE_DBA;
 	return 0;
 }
 
@@ -1866,6 +1868,10 @@ static __init int cxl_core_init(void)
 	if (rc)
 		return rc;
 
+	rc = cxl_dba_init();
+	if (rc)
+		return rc;
+
 	cxl_bus_wq = alloc_ordered_workqueue("cxl_port", 0);
 	if (!cxl_bus_wq) {
 		rc = -ENOMEM;
@@ -1897,6 +1903,7 @@ static void cxl_core_exit(void)
 	bus_unregister(&cxl_bus_type);
 	destroy_workqueue(cxl_bus_wq);
 	cxl_memdev_exit();
+	cxl_dba_exit();
 	debugfs_remove_recursive(cxl_debugfs);
 }
 
diff --git a/drivers/cxl/cxl.h b/drivers/cxl/cxl.h
index ac75554b5..e1d646c13 100644
--- a/drivers/cxl/cxl.h
+++ b/drivers/cxl/cxl.h
@@ -627,6 +627,7 @@ void cxl_driver_unregister(struct cxl_driver *cxl_drv);
 #define CXL_DEVICE_MEMORY_EXPANDER	5
 #define CXL_DEVICE_REGION		6
 #define CXL_DEVICE_PMEM_REGION		7
+#define CXL_DEVICE_DBA			8
 
 #define MODULE_ALIAS_CXL(type) MODULE_ALIAS("cxl:t" __stringify(type) "*")
 #define CXL_MODALIAS_FMT "cxl:t%d"
diff --git a/drivers/cxl/cxldba.h b/drivers/cxl/cxldba.h
new file mode 100644
index 000000000..4b08d61f7
--- /dev/null
+++ b/drivers/cxl/cxldba.h
@@ -0,0 +1,29 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright(c) 2021-2023 Samsung LTD. All rights reserved. */
+
+#ifndef __CXL_DBA_H__
+#define __CXL_DBA_H__
+
+#include <linux/cdev.h>
+#include <linux/pci_ids.h>
+#include "cxlmem.h"
+#include "cxl.h"
+
+#define DBA_CSR_SIZE 0x2000
+#define DBA_DEVICE_ID 0x3300
+
+struct cxl_dba {
+	struct device dev;
+	struct cdev cdev;
+	struct resource *csr_regs;
+	int id;
+};
+
+static inline int cxl_is_dba(__u32 vendor_id, __u32 device_id)
+{
+	return vendor_id == PCI_VENDOR_ID_SAMSUNG  && device_id == DBA_DEVICE_ID;
+}
+
+int cxl_add_dba(struct device *parent, int id);
+
+#endif //__CXL_DBA_H__
diff --git a/drivers/cxl/dba.c b/drivers/cxl/dba.c
new file mode 100644
index 000000000..6abd1621b
--- /dev/null
+++ b/drivers/cxl/dba.c
@@ -0,0 +1,24 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/* Copyright(c) 2021-2023 Samsung LTD. All rights reserved. */
+
+#include <linux/device.h>
+#include <linux/module.h>
+#include <linux/pci.h>
+
+#include "cxldba.h"
+
+// According to CXL_BUS probe function, this function should be defined
+static int cxl_dba_probe(struct device *dev)
+{
+	dev_dbg(dev, "start probing device");
+	return 0;
+}
+
+static struct cxl_driver dba_driver = { .name = "cxl_dba",
+					.probe = cxl_dba_probe,
+					.id = CXL_DEVICE_DBA };
+
+module_cxl_driver(dba_driver);
+MODULE_LICENSE("GPL v2");
+MODULE_IMPORT_NS(CXL);
+MODULE_ALIAS_CXL(CXL_DEVICE_DBA);
diff --git a/drivers/cxl/pci.c b/drivers/cxl/pci.c
index faeb5d9d7..bd736a086 100644
--- a/drivers/cxl/pci.c
+++ b/drivers/cxl/pci.c
@@ -11,6 +11,7 @@
 #include <linux/pci-doe.h>
 #include <linux/io.h>
 #include "cxlmem.h"
+#include "cxldba.h"
 #include "cxlpci.h"
 #include "cxl.h"
 
@@ -501,6 +502,11 @@ static int cxl_pci_probe(struct pci_dev *pdev, const struct pci_device_id *id)
 	if (resource_size(&cxlds->pmem_res) && IS_ENABLED(CONFIG_CXL_PMEM))
 		rc = devm_cxl_add_nvdimm(&pdev->dev, cxlmd);
 
+	if (cxl_is_dba(pdev->vendor, pdev->device)) {
+		dev_dbg(&pdev->dev, "Detected DBA device");
+		rc = cxl_add_dba(&pdev->dev, cxlmd->id);
+	}
+
 	return rc;
 }
 
-- 
2.34.1

