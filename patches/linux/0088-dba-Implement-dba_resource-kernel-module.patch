From 55be519168613110e27a16ebaf0a721395460b96 Mon Sep 17 00:00:00 2001
From: Yaroslav Lavrinenko <y.lavrinenko@samsung.com>
Date: Fri, 17 Mar 2023 10:04:59 +0300
Subject: [PATCH 088/225] [dba] Implement dba_resource kernel module

Create kernel module that will create char device `/dev/pnm/dba_resource`
and implement two IOCTL to allocate and deallocate memory.
For memory management we will use genalloc to provide allocation logic.

Refers to: AXDIMM-691

Signed-off-by: Valentin Iliushin v.iliushin@partner.samsung.com
---
 config-axdimm                          |   1 +
 drivers/Kconfig                        |   2 +
 drivers/Makefile                       |   1 +
 drivers/dba_resource/Kconfig           |   7 +
 drivers/dba_resource/Makefile          |   6 +
 drivers/dba_resource/dba_allocator.c   | 118 +++++++++++++++
 drivers/dba_resource/dba_allocator.h   |  30 ++++
 drivers/dba_resource/dba_log.h         |  27 ++++
 drivers/dba_resource/resource_device.c | 199 +++++++++++++++++++++++++
 include/uapi/linux/dba_resources.h     |  41 +++++
 install_dba_resource.sh                |  10 ++
 11 files changed, 442 insertions(+)
 create mode 100644 drivers/dba_resource/Kconfig
 create mode 100644 drivers/dba_resource/Makefile
 create mode 100644 drivers/dba_resource/dba_allocator.c
 create mode 100644 drivers/dba_resource/dba_allocator.h
 create mode 100644 drivers/dba_resource/dba_log.h
 create mode 100644 drivers/dba_resource/resource_device.c
 create mode 100644 include/uapi/linux/dba_resources.h
 create mode 100755 install_dba_resource.sh

diff --git a/config-axdimm b/config-axdimm
index a4625d9d7..d9dd96194 100644
--- a/config-axdimm
+++ b/config-axdimm
@@ -10014,6 +10014,7 @@ CONFIG_DEV_DAX_KMEM=m
 # CONFIG_DEV_DAX_PMEM_COMPAT is not set
 CONFIG_AXDIMM=y
 CONFIG_DBA=y
+CONFIG_DBA_RESOURCE=m
 CONFIG_NVMEM=y
 CONFIG_NVMEM_SYSFS=y
 # CONFIG_NVMEM_RAVE_SP_EEPROM is not set
diff --git a/drivers/Kconfig b/drivers/Kconfig
index 19ee995bd..af21814ab 100644
--- a/drivers/Kconfig
+++ b/drivers/Kconfig
@@ -239,4 +239,6 @@ source "drivers/peci/Kconfig"
 
 source "drivers/hte/Kconfig"
 
+source "drivers/dba_resource/Kconfig"
+
 endmenu
diff --git a/drivers/Makefile b/drivers/Makefile
index bdf1c6614..1fe05951c 100644
--- a/drivers/Makefile
+++ b/drivers/Makefile
@@ -189,3 +189,4 @@ obj-$(CONFIG_COUNTER)		+= counter/
 obj-$(CONFIG_MOST)		+= most/
 obj-$(CONFIG_PECI)		+= peci/
 obj-$(CONFIG_HTE)		+= hte/
+obj-$(CONFIG_DBA_RESOURCE) += dba_resource/
diff --git a/drivers/dba_resource/Kconfig b/drivers/dba_resource/Kconfig
new file mode 100644
index 000000000..f78ce5874
--- /dev/null
+++ b/drivers/dba_resource/Kconfig
@@ -0,0 +1,7 @@
+# SPDX-License-Identifier: GPL-2.0-only
+config DBA_RESOURCE
+	tristate "DBA Resource Manager: handle resource of CXL-DBA device"
+	help
+	  Create /dev/pnm/dba_resourceX device that provides IOCTL
+	  interface to handle DBA resources like memory, threads and
+	  cores.
diff --git a/drivers/dba_resource/Makefile b/drivers/dba_resource/Makefile
new file mode 100644
index 000000000..429289d2c
--- /dev/null
+++ b/drivers/dba_resource/Makefile
@@ -0,0 +1,6 @@
+# SPDX-License-Identifier: GPL-2.0
+
+obj-$(CONFIG_DBA_RESOURCE) += dba_resource.o
+
+dba_resource-y := resource_device.o
+dba_resource-y += dba_allocator.o
diff --git a/drivers/dba_resource/dba_allocator.c b/drivers/dba_resource/dba_allocator.c
new file mode 100644
index 000000000..9e79e5e61
--- /dev/null
+++ b/drivers/dba_resource/dba_allocator.c
@@ -0,0 +1,118 @@
+/*
+ * Copyright (C) 2023 Samsung Electronics Co. LTD
+ *
+ * This software is proprietary of Samsung Electronics.
+ * No part of this software, either material or conceptual may be copied or
+ * distributed, transmitted, transcribed, stored in a retrieval system or
+ * translated into any human or computer language in any form by any means,
+ * electronic, mechanical, manual or otherwise, or disclosed to third parties
+ * without the express written permission of Samsung Electronics.
+ */
+
+#include "dba_allocator.h"
+#include "dba_log.h"
+
+#include <linux/mutex.h>
+
+static struct MemoryAllocator general_alloc;
+
+DEFINE_MUTEX(allocator_lock);
+
+static int init_memory_pool(struct MemoryAllocator *alloc)
+{
+	alloc->granularity = PAGE_SIZE;
+
+	alloc->pool = gen_pool_create(ilog2(alloc->granularity), -1);
+
+	if (alloc->pool == NULL) {
+		DBA_ERR("Fail to create memory pool.");
+		return -ENOMEM;
+	}
+
+	if (gen_pool_add(alloc->pool, alloc->granularity,
+			 DBA_MEMORY_TOTAL_SIZE - alloc->granularity, -1) < 0) {
+		DBA_ERR("Fail to init memory pool with size %llu.",
+			DBA_MEMORY_TOTAL_SIZE);
+
+		gen_pool_destroy(alloc->pool);
+		return -EINVAL;
+	}
+
+	gen_pool_set_algo(alloc->pool, gen_pool_best_fit, NULL);
+
+	return 0;
+}
+
+static void mem_pool_mark_zero_chunk_size(struct gen_pool *pool,
+					  struct gen_pool_chunk *chunk,
+					  void *data)
+{
+	chunk->end_addr = chunk->start_addr - 1;
+}
+
+static int destroy_memory_pool(struct MemoryAllocator *alloc)
+{
+	if (gen_pool_size(alloc->pool) != gen_pool_avail(alloc->pool)) {
+		DBA_WRN("Trying to destroy non-empty pool.");
+		gen_pool_for_each_chunk(alloc->pool,
+					mem_pool_mark_zero_chunk_size, NULL);
+	}
+
+	gen_pool_destroy(alloc->pool);
+	return 0;
+}
+
+int allocate_memory(struct dba_allocation *req)
+{
+	int result = 0;
+	mutex_lock(&allocator_lock);
+
+	req->address = gen_pool_alloc(general_alloc.pool, req->size);
+	if (req->address == 0) {
+		DBA_ERR("Fail to allocate %llu bytes.", req->size);
+		result = -ENOMEM;
+	}
+
+	mutex_unlock(&allocator_lock);
+	return result;
+}
+
+void deallocate_memory(struct dba_allocation *req)
+{
+	mutex_lock(&allocator_lock);
+	gen_pool_free(general_alloc.pool, req->address, req->size);
+	mutex_unlock(&allocator_lock);
+}
+
+int initialize_memory_allocator(void)
+{
+	int result = 0;
+	mutex_init(&allocator_lock);
+	mutex_lock(&allocator_lock);
+
+	result = init_memory_pool(&general_alloc);
+
+	mutex_unlock(&allocator_lock);
+	return result;
+}
+
+void destroy_memory_allocator(void)
+{
+	mutex_lock(&allocator_lock);
+	destroy_memory_pool(&general_alloc);
+
+	mutex_unlock(&allocator_lock);
+	mutex_destroy(&allocator_lock);
+}
+
+int reset_memory_allocator(void)
+{
+	int result = 0;
+	mutex_lock(&allocator_lock);
+
+	destroy_memory_pool(&general_alloc);
+	result = init_memory_pool(&general_alloc);
+
+	mutex_unlock(&allocator_lock);
+	return result;
+}
diff --git a/drivers/dba_resource/dba_allocator.h b/drivers/dba_resource/dba_allocator.h
new file mode 100644
index 000000000..3faf92750
--- /dev/null
+++ b/drivers/dba_resource/dba_allocator.h
@@ -0,0 +1,30 @@
+/*
+ * Copyright (C) 2023 Samsung Electronics Co. LTD
+ *
+ * This software is proprietary of Samsung Electronics.
+ * No part of this software, either material or conceptual may be copied or
+ * distributed, transmitted, transcribed, stored in a retrieval system or
+ * translated into any human or computer language in any form by any means,
+ * electronic, mechanical, manual or otherwise, or disclosed to third parties
+ * without the express written permission of Samsung Electronics.
+ */
+
+#ifndef __DBA_ALLOCATOR_H__
+#define __DBA_ALLOCATOR_H__
+
+#include <linux/dba_resources.h>
+#include <linux/genalloc.h>
+
+struct MemoryAllocator {
+	unsigned long granularity;
+	struct gen_pool *pool;
+};
+
+int initialize_memory_allocator(void);
+void destroy_memory_allocator(void);
+int reset_memory_allocator(void);
+
+int allocate_memory(struct dba_allocation *req);
+void deallocate_memory(struct dba_allocation *req);
+
+#endif
diff --git a/drivers/dba_resource/dba_log.h b/drivers/dba_resource/dba_log.h
new file mode 100644
index 000000000..f133da5ed
--- /dev/null
+++ b/drivers/dba_resource/dba_log.h
@@ -0,0 +1,27 @@
+/*
+ * Copyright (C) 2023 Samsung Electronics Co. LTD
+ *
+ * This software is proprietary of Samsung Electronics.
+ * No part of this software, either material or conceptual may be copied or
+ * distributed, transmitted, transcribed, stored in a retrieval system or
+ * translated into any human or computer language in any form by any means,
+ * electronic, mechanical, manual or otherwise, or disclosed to third parties
+ * without the express written permission of Samsung Electronics.
+ */
+
+#ifndef __DBA_LOG_H__
+#define __DBA_LOG_H__
+
+#include <linux/kernel.h>
+
+#define DBA_DD_MARK "[DBA_RESOURCE_MGR]"
+
+#define DBA_PRINT(level, fmt, ...)                                 \
+	pr_##level(DBA_DD_MARK "[%s:%d] " fmt, __FILE__, __LINE__, \
+		   ##__VA_ARGS__)
+#define DBA_ERR(fmt, ...) DBA_PRINT(err, fmt, ##__VA_ARGS__)
+#define DBA_WRN(fmt, ...) DBA_PRINT(warn, fmt, ##__VA_ARGS__)
+#define DBA_INF(fmt, ...) DBA_PRINT(info, fmt, ##__VA_ARGS__)
+#define DBA_DBG(fmt, ...) DBA_PRINT(debug, fmt, ##__VA_ARGS__)
+
+#endif /* __DBA_LOG_H__ */
diff --git a/drivers/dba_resource/resource_device.c b/drivers/dba_resource/resource_device.c
new file mode 100644
index 000000000..f81a84be3
--- /dev/null
+++ b/drivers/dba_resource/resource_device.c
@@ -0,0 +1,199 @@
+/*
+ * Copyright (C) 2023 Samsung Electronics Co. LTD
+ *
+ * This software is proprietary of Samsung Electronics.
+ * No part of this software, either material or conceptual may be copied or
+ * distributed, transmitted, transcribed, stored in a retrieval system or
+ * translated into any human or computer language in any form by any means,
+ * electronic, mechanical, manual or otherwise, or disclosed to third parties
+ * without the express written permission of Samsung Electronics.
+ */
+
+#include "dba_log.h"
+#include "dba_allocator.h"
+
+#include <linux/init.h>
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/fs.h>
+#include <linux/cdev.h>
+#include <linux/device.h>
+#include <linux/dba_resources.h>
+
+long dba_ioctl(struct file *file, unsigned int cmd, unsigned long __user arg)
+{
+	int result = 0;
+	struct dba_allocation req;
+
+	if (_IOC_TYPE(cmd) != DBA_RESOURCE_IOC_MAGIC) {
+		DBA_ERR("Wrong ioctl request: %d", cmd);
+		return -ENOTTY;
+	}
+
+	switch (cmd) {
+	case DBA_IOCTL_RESET:
+		result = reset_memory_allocator();
+		if (result < 0) {
+			DBA_ERR("DBA Resource Manager reset failed");
+		}
+		return result;
+
+	case DBA_IOCTL_ALLOCATE:
+		result = copy_from_user(&req,
+					(const struct dba_allocation __user *)arg,
+					sizeof(struct dba_allocation));
+
+		if (result < 0) {
+			DBA_ERR("Failed copy from user");
+			return -EFAULT;
+		}
+
+		result = allocate_memory(&req);
+		if (result < 0) {
+			return result;
+		}
+
+		result = copy_to_user((const struct dba_allocation __user *)arg, &req,
+				      sizeof(struct dba_allocation));
+		if (result < 0) {
+			DBA_ERR("Failed copy to user");
+			return -EFAULT;
+		}
+
+		return 0;
+
+	case DBA_IOCTL_DEALLOCATE:
+		result = copy_from_user(&req,
+					(const struct dba_allocation __user *)arg,
+					sizeof(struct dba_allocation));
+
+		if (result < 0) {
+			DBA_ERR("Failed copy from user");
+			return -EFAULT;
+		} else {
+			deallocate_memory(&req);
+			return 0;
+		}
+
+	default:
+		DBA_ERR("Unknown ioctl: %d", cmd);
+		return -ENOTTY;
+	}
+
+	return 0;
+}
+
+static const struct file_operations dba_resource_operation = {
+	.owner = THIS_MODULE,
+	.unlocked_ioctl = dba_ioctl
+};
+static int device_major_number = -1;
+static struct cdev resource_device;
+static struct class *device_class;
+
+static void destroy_resource_device(int device_created)
+{
+	if (device_created) {
+		DBA_INF("Destroy DBA resource device");
+		device_destroy(device_class, device_major_number);
+		cdev_del(&resource_device);
+	}
+
+	if (device_class)
+		class_destroy(device_class);
+
+	if (device_major_number != -1)
+		unregister_chrdev_region(device_major_number, 1);
+}
+
+static char *devnode_func(struct device *dev, umode_t *mode)
+{
+	if (!mode)
+		return NULL;
+
+	*mode = DBA_RW_MODE;
+	return NULL;
+}
+
+static int create_resource_device(void)
+{
+	int device_created = 0;
+
+	DBA_INF("Trying to create resource device...");
+
+	if (alloc_chrdev_region(&device_major_number, 0, 1,
+				DBA_RESOURCE_DEVICE_NAME) < 0) {
+		DBA_ERR("Fail to allocate chrdev region");
+		goto fail;
+	}
+
+	device_class =
+		class_create(THIS_MODULE, DBA_RESOURCE_DEVICE_NAME "_sys");
+	if (device_class == NULL) {
+		DBA_ERR("Fail to create device class");
+		goto fail;
+	}
+
+	device_class->devnode = devnode_func;
+
+	if (device_create(device_class, NULL, device_major_number, NULL,
+			  DBA_RESOURCE_DEVICE_NAME) == NULL) {
+		DBA_ERR("Fail to create device in /dev/*");
+		goto fail;
+	}
+
+	device_created = 1;
+	cdev_init(&resource_device, &dba_resource_operation);
+
+	if (cdev_add(&resource_device, device_major_number, 1) == -1) {
+		DBA_ERR("Fail to add device.");
+		goto fail;
+	}
+
+	DBA_INF("The resource device is created.");
+
+	return 0;
+
+fail:
+	destroy_resource_device(device_created);
+	return -1;
+}
+
+static int __init init_dba_resource_module(void)
+{
+	int result = 0;
+
+	DBA_INF("Begin DBA Resource Manager initialization...");
+
+	result = create_resource_device();
+
+	if (result < 0) {
+		DBA_ERR("DBA Resource Manager initialization failed");
+		return result;
+	}
+
+	result = initialize_memory_allocator();
+
+	if (result < 0) {
+		DBA_ERR("Fail to initialize memory allocator.");
+		return result;
+	}
+
+	DBA_INF("Initialization is done");
+	return 0;
+}
+
+static void __exit exit_dba_resource_module(void)
+{
+	destroy_resource_device(1);
+
+	destroy_memory_allocator();
+
+	DBA_INF("DBA Resource Manager unloaded.");
+}
+
+MODULE_LICENSE("GPL");
+MODULE_DESCRIPTION("DBA Resource Manager");
+
+module_init(init_dba_resource_module);
+module_exit(exit_dba_resource_module);
diff --git a/include/uapi/linux/dba_resources.h b/include/uapi/linux/dba_resources.h
new file mode 100644
index 000000000..2caa8c17e
--- /dev/null
+++ b/include/uapi/linux/dba_resources.h
@@ -0,0 +1,41 @@
+/*
+ * Copyright (C) 2023 Samsung Electronics Co. LTD
+ *
+ * This software is proprietary of Samsung Electronics.
+ * No part of this software, either material or conceptual may be copied or
+ * distributed, transmitted, transcribed, stored in a retrieval system or
+ * translated into any human or computer language in any form by any means,
+ * electronic, mechanical, manual or otherwise, or disclosed to third parties
+ * without the express written permission of Samsung Electronics.
+ */
+#ifndef __DBA_RESOURCES_H__
+#define __DBA_RESOURCES_H__
+
+#ifdef __KERNEL__
+#include <linux/types.h>
+#else
+#include <stdint.h> // for uint64_t
+#endif
+
+// [TODO: y-lavrinenko] Should be merged with libimdb.h when the last is on kernel
+
+#define DBA_RESOURCE_DEVICE_NAME "pnm/dba_resource"
+#define DBA_RESOURCE_DEVICE_PATH "/dev/" DBA_RESOURCE_DEVICE_NAME
+
+#define DBA_MEMORY_TOTAL_SIZE (4ULL * 1024 * 1024 * 1024)
+#define DBA_RW_MODE 0666
+
+struct dba_allocation {
+	uint64_t address;
+	uint64_t size;
+};
+
+#define DBA_RESOURCE_IOC_MAGIC 'D'
+
+#define DBA_IOCTL_RESET _IO(DBA_RESOURCE_IOC_MAGIC, 0)
+#define DBA_IOCTL_ALLOCATE \
+	_IOWR(DBA_RESOURCE_IOC_MAGIC, 1, struct dba_allocation)
+#define DBA_IOCTL_DEALLOCATE \
+	_IOW(DBA_RESOURCE_IOC_MAGIC, 2, struct dba_allocation)
+
+#endif /* __DBA_RESOURCES_H__ */
diff --git a/install_dba_resource.sh b/install_dba_resource.sh
new file mode 100755
index 000000000..cbe25fdb0
--- /dev/null
+++ b/install_dba_resource.sh
@@ -0,0 +1,10 @@
+#!/bin/sh
+
+set -e
+
+sudo cp -v drivers/dba_resource/*.ko /lib/modules/`uname -r`/kernel/drivers/dba_resource/
+sudo cp -v include/uapi/linux/dba_resources.h /usr/include/linux
+sudo cp -v include/uapi/linux/dba_resources.h /usr/src/linux-headers-`uname -r`/include/uapi/linux
+
+#sudo rmmod dba_resource
+sudo modprobe dba_resource "$@"
-- 
2.34.1

