From 72ddbd80980c4dd0a8813facd4636ada24ccca08 Mon Sep 17 00:00:00 2001
From: Aleksandr Korzun <a.korzun@partner.samsung.com>
Date: Mon, 26 Sep 2022 14:29:32 +0300
Subject: [PATCH 20/33] Add tests for DeepRecSys debugging.

Add tests (using Python, `unittest` and `pexpect`) for the debugger
script. Currently, there are two tests that should cover the most
critical aspects of the behavior of the script.

Signed-off-by: Aleksandr Korzun <a.korzun@partner.samsung.com>
---
 debug/README.md      |   3 ++
 debug/test/README.md |  26 +++++++++++
 debug/test/tests.py  | 105 +++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 134 insertions(+)
 create mode 100644 debug/README.md
 create mode 100644 debug/test/README.md
 create mode 100755 debug/test/tests.py

diff --git a/debug/README.md b/debug/README.md
new file mode 100644
index 0000000..ee9ea39
--- /dev/null
+++ b/debug/README.md
@@ -0,0 +1,3 @@
+# GDB script for DeepRecSys debugging
+- How to setup and use the debugger: [Confluence page](https://wiki.itplatform.samsungds.net:8090/pages/viewpage.action?pageId=185463699)
+- How to run tests for the debugger script: [README.md in `./test`](tests/README.md)
diff --git a/debug/test/README.md b/debug/test/README.md
new file mode 100644
index 0000000..001e95f
--- /dev/null
+++ b/debug/test/README.md
@@ -0,0 +1,26 @@
+# Running tests for the debugger script
+The tests are written in Python using the
+[`unittest`](https://docs.python.org/3/library/unittest.html)
+framework from the Python standard library and
+[`pexpect`](https://pexpect.readthedocs.io/en/stable/index.html) to simulate
+interaction with GDB. To run the tests, you need to have `pexpect` installed:
+
+```sh
+# Option 1: install system package from apt repositories.
+# (might already be installed).
+sudo apt install python3-pexpect
+
+# Option 2: install from PyPI.
+#   Option 2a: install into the home directory.
+python3 -m pip install --user pexpect
+#   Option 2b: install as a system Python package.
+sudo python3 -m pip install pexpect
+```
+
+Tests must be run from the root directory of the application, where
+the `run_DeepRecSys_axdimm.sh` file is located. The following command
+will run all tests:
+
+```sh
+python3 ./debug/test/tests.py
+```
diff --git a/debug/test/tests.py b/debug/test/tests.py
new file mode 100755
index 0000000..637acf4
--- /dev/null
+++ b/debug/test/tests.py
@@ -0,0 +1,105 @@
+#!/usr/bin/env python3
+import pexpect  # type: ignore
+import subprocess
+import unittest
+from functools import lru_cache
+from typing import List
+
+@lru_cache(maxsize=1)
+def get_gdb_args() -> List[str]:
+  # Get the GDB args that the starter script would use.
+  proc = subprocess.run(
+    ['./run_DeepRecSys_axdimm.sh', '--debug-with', 'echo', '--debug-stdio', '/dev/null'],
+    check=True,
+    text=True,
+    stdout=subprocess.PIPE,
+  )
+  return proc.stdout.strip().split()
+
+class TestDeepRecSysDebug(unittest.TestCase):
+  def setUp(self) -> None:
+    self.gdb = pexpect.spawn('gdb', get_gdb_args(), timeout=5)
+    # Allow GDB to take time to start and initialize.
+    self.gdb.expect_exact('(gdb) ', timeout=30)
+
+  def tearDown(self) -> None:
+    self.gdb.terminate(force=True)
+
+  def test_axdimm_libs_found(self) -> None:
+    # Attempt to make a breakpoint on a library symbol.
+    # This would work only if the libraries have been found and loaded.
+    self.gdb.sendline('break axdimm::AxdimmRunner::run')
+    self.gdb.expect('Breakpoint 1')
+
+  def test_threads_stopped_then_running(self) -> None:
+    self.gdb.sendline('tbreak axdimm::AxdimmRunner::run')
+    self.gdb.sendline('run')
+
+    # Be quite liberal in timeout. This step usually completes in under
+    # 30 seconds, but may depend on system load.
+    self.gdb.expect('[Hh]it [Tt]emporary [Bb]reakpoint 1', timeout=150)
+
+    # No-op to see and consume GDB prompt.
+    self.gdb.sendline('echo')
+    self.gdb.expect_exact('(gdb) ')
+
+    lines_before_continue = self._get_thread_info()
+
+    # Threads of at least 3 processes (main, IE, LoadGenerator) must be alive at the moment.
+    self.assertGreaterEqual(len(lines_before_continue), 3)
+
+    # No thread must be running.
+    for line in lines_before_continue:
+      thread_id = line.split(maxsplit=1)[0]
+      with self.subTest('Thread must not be running', thread_id=thread_id):
+        self.assertNotIn('(running)', line)
+
+    self.gdb.sendline('continue &')
+    self.gdb.expect_exact('(gdb) ')
+
+    lines_after_continue = self._get_thread_info()
+
+    # Threads of at least 3 processes (main, IE, LoadGenerator) must be alive at the moment.
+    self.assertGreaterEqual(len(lines_before_continue), 3)
+
+    # All threads must be running.
+    for line in lines_after_continue:
+      thread_id = line.split(maxsplit=1)[0]
+      with self.subTest('Thread must be running', thread_id=thread_id):
+        self.assertIn('(running)', line)
+
+  def _get_thread_info(self) -> List[str]:
+    self.gdb.sendline('info threads')
+    # Without a no-op `echo`, GDB does not output a newline after the prompt,
+    # which makes `self.gdb.readline()` block before we have a chance to stop.
+    self.gdb.sendline('echo')
+
+    # Collected lines.
+    thread_info_lines: List[str] = []
+
+    while True:
+      line = self.gdb.readline().decode('utf-8').strip()
+      if line.startswith('[') and line.endswith(']'):
+        # Asynchronous notification from GDB, ignore it.
+        continue
+      if line == 'echo':
+        # Sometimes, `echo` is intermixed with the GDB output.
+        continue
+      if line.startswith('(gdb)'):
+        # Prompt => list of threads finished.
+        break
+      thread_info_lines.append(line)
+    # Consume everything (this is the next prompt triggered by `echo`).
+    self.gdb.expect_exact('(gdb) ')
+
+    # There is the line with the command...
+    self.assertEqual('info threads', thread_info_lines[0])
+    # ... and the header line...
+    self.assertIn('Id', thread_info_lines[1])
+    self.assertIn('Frame', thread_info_lines[1])
+    # ... discard both of them.
+    del thread_info_lines[0:2]
+    return thread_info_lines
+
+if __name__ == '__main__':
+  unittest.main()
-- 
2.34.1

